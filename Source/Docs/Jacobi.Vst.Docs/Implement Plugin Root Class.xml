<?xml version="1.0" encoding="utf-8"?>
<developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <introduction>
  	<para>The 
    <codeEntityReference>T:Jacobi.Vst.Framework.IVstPlugin</codeEntityReference>
    interface is mandatory for all plugin (root object) implementations. 
    Implementing this interface yourself is clearly the most work. The base 
    classes described in the following section implement the interface for
    you.</para>
    <para>
    The interface contains mostly properties that communicate initial plugin 
    information to the host. But the most important role of the Plugin root 
    object is that it receives interface requests through the 
    <codeEntityReference>T:Jacobi.Vst.Framework.IExtensible</codeEntityReference>
    interface implementation. The 
    <codeInline>IExtensible</codeInline> 
    interface is the base interface
    for the 
    <codeInline>IVstPlugin</codeInline> 
    interface.</para>
    <para>The Plugin root object is also the only object that gets disposed by
    the framework through the 
    <codeInline>IDispose</codeInline>
    interface, which is also a base for the
    <codeInline>IVstPlugin</codeInline>
    interface.</para>
    <para>The following sections describe the different options you have 
    when implementing the Plugin root object. Pick one that suites you most.</para>
  </introduction>

  <section address="IVstPlugin">
    <title>Implement IVstPlugin</title>
    <content>
      <para>The first option you have is to implement the
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPlugin</codeEntityReference>
      interface yourself (or should this be your last option?). This option 
      provides the most flexibility in how you handle implementing the 
      properties and the 
      <codeInline>IExtensible</codeInline>
      interface. You still have the option to use the
      <link xlink:href="0aca5a96-16d9-4f8e-a830-202d8bad418a"/> 
      in your implementation.</para>
      <para>The following code snippet shows a basic implementation. You can 
      also refer to the samples to see implementations of this interface. Note
      that the implementation of the 
      <codeInline>IExtensible</codeInline>
      interface uses the Plugin root
      object instance to resolve additional implemented interfaces.
      </para>
      
      <codeReference>GettingStarted#ImplementPluginRootClassIVstPlugin</codeReference>
    </content>
  </section>
  
  <section address="VstPluginBase">
    <title>Derive from VstPluginBase</title>
    <content>
      <para>
      The
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginBase</codeEntityReference>
      class implements the
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPlugin</codeEntityReference>
      for you. Most of the properties are set to the value passed into the 
      constructor of this base class and the methods of the interface are all 
      implemented as virtual, thus overridable in your derived class. Another 
      important aspect of using this base class is that it assumes you implement
      all additional interfaces on the Plugin root object instance itself 
      (a bit like the original VST C++ SDK did). If you want to use the
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.PluginInterfaceManagerBase</codeEntityReference>
      class you should override the 
      <codeInline>Supports</codeInline>
      and
      <codeInline>GetInstance</codeInline>
      methods and route those to your instance of the class that derives from
      <codeInline>PluginInterfaceManagerBase</codeInline> class.
      </para>
      <para>The following code example shows you how to use the VstPluginBase
      class.</para>
      
      <codeReference>GettingStarted#ImplementPluginRootClassVstPluginBase</codeReference>
      
      <para>Compared to the previous section there is a lot less coding to do. 
      The
      <codeInline>VstPluginBase</codeInline>
      class implements the
      <codeInline>IExtensible</codeInline>
      interface in the same way as show in the previous section. The
      <codeEntityReference>M:Jacobi.Vst.Framework.Plugin.VstPluginBase.Dispose</codeEntityReference>
      method is virtual and can be overriden. Do call the base class for it 
      resets the 
      <codeEntityReference>P:Jacobi.Vst.Framework.Plugin.VstPluginBase.Host</codeEntityReference>
      property.
      </para>
    </content>
  </section>

  <section address="VstPluginWithInterfaceManagerBase">
    <title>Derive from VstPluginWithInterfaceManagerBase</title>
    <content>
      <para>
      The 
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginWithInterfaceManagerBase</codeEntityReference>
      not only provides an implementation for the 
      <codeInline>IVstPlugin</codeInline>
      interface it also derives from the
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.PluginInterfaceManagerBase</codeEntityReference>
      base class. The methods of the 
      <codeInline>IExtension</codeInline>
      interface are mapped to the implementation provided by the 
      <codeInline>PluginInterfaceManagerBase</codeInline> class.
      </para>
      <para>This means that all the
      <codeInline>CreateXxxx</codeInline>
      overrides are implemented on the Plugin root object as shown in the 
      following example.
      </para>
      
      <codeReference>GettingStarted#ImplementPluginRootClassVstPluginWithInterfaceManagerBase</codeReference>
      
	  <alert class="note">
		<para>Note that the 
		<codeInline>AudioProcessor</codeInline>
		is a class that is not shown in the sample code but is meant to 
		demonstrate how the objects that implement the additional interfaces of
		<token>vstnet</token> could be managed.
		</para>
	  </alert>

    </content>
  </section>
  
  <relatedTopics>
  <codeEntityReference>T:Jacobi.Vst.Framework.IVstPlugin</codeEntityReference>
  <codeEntityReference>T:Jacobi.Vst.Framework.IExtensible</codeEntityReference>
  <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.PluginInterfaceManagerBase</codeEntityReference>
  <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginBase</codeEntityReference>
  <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginWithInterfaceManagerBase</codeEntityReference>
  <link xlink:href="0aca5a96-16d9-4f8e-a830-202d8bad418a"/> 
  <link xlink:href="62feac6e-0c75-4ef8-8703-fb970f81280b"/> 
  </relatedTopics>
</developerConceptualDocument>
