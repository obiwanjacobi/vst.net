<?xml version="1.0" encoding="utf-8"?>
<topic id="da9d3d7d-c5f5-4d05-99a2-70b020f2cbfb" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
  <summary>
    <para>Introduce the concept. Explain the difference between programs and
    presets. Link to parameter topic.</para>
  </summary>
  -->
  
    <introduction>
      <para>
      A Plugin Program is a saved set of values for all Plugin Parameters. When 
      a Plugin supports Programs it typically reserves a fixed number at 
      start-up. A user can change Programs on a Plugin and thereby changing the 
      values for all Parameters quickly. Some Plugin also support Presets. A 
      Preset is a read-only Program. Its settings for all Plugin Parameters can 
      not be changed by the user. Think of them as Factory or Demo Presets.
      </para>      
    </introduction>
    
    <section address="ProgramSupport">
      <title>Framework Program Support</title>
      <content>
        <para>
        A Plugin that supports the
        <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPrograms</codeEntityReference>
        interface has Programs. The interface exposes a collection of
        <codeEntityReference>T:Jacobi.Vst.Framework.VstProgram</codeEntityReference>
        instances. Each instance represents one Program. The
        <codeInline>VstProgram</codeInline>
        class also implements the
        <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginParameters</codeEntityReference>
        interface. So each Program has his own set of Parameters, with their
        unique values. But all Programs have the same number of Parameters and
        the 
        <codeInline>VstParameter.Info</codeInline>
        property identifies each Parameter that is shared across Programs. Refer to this
        <externalLink>
          <linkText>blog post</linkText>
          <linkUri>http://obiwanjacobi.blogspot.com/2008/05/vstnet-programs-and-parameters.html</linkUri>
        </externalLink>
        for more information.
        </para>
        <para>
        The 
        <codeEntityReference>T:Jacobi.Vst.Framework.VstParameterManager</codeEntityReference>
        class manages the current value of a Parameter for multiple Programs. It
        is notified when Programs (and their Parameters) are activated or 
        deactivated and updates the current Parameter value accoordingly. It 
        also stores the previous parameter value to make it easy for any form of
        Parameter value smoothing to be implemented. When a Plugin does not use
        Programs, the
        <codeInline>VstParameterManager</codeInline>
        is not strictly necessary and one can interface directly with 
        <codeInline>VstParameter</codeInline>
        to retrieve its value.
        </para>
        <para>
        The Framework also provides a base class you can derive from to eas 
        implementing Programs in your Plugin.
        The 
        <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginProgramsBase</codeEntityReference>
        abstract base class implements all members of the interface. The derived
        class only has to implement a method that creates the 
        <codeInline>VstProgramCollection</codeInline>
        filled with a
        <codeInline>VstProgram</codeInline>
        instance for each Program the Plugin provides.
        </para>
      </content>
    </section>
    
    <section address="ClassDiagram">
      <title>Class Diagram</title>
      <content>
        <para>
        The following class diagram displays the classes involved in Plugin
        Parameters (at the bottom) and Programs.
        </para>
        <mediaLink>
          <caption placement="after" lead="Class Diagram">The Plugin Program and Parameter classes</caption>
          <image xlink:href="02d56585-99fc-4b52-803c-7794f670c031" />
        </mediaLink>
        <para>
        The 
        <codeEntityReference>T:Jacobi.Vst.Framework.VstParameterInfo</codeEntityReference>
        class contains the meta data for a Parameter. There is only one instance
        of the 
        <codeInline>VstParameterInfo</codeInline>
        class for each Parameter. The
        <codeEntityReference>T:Jacobi.Vst.Framework.VstParameter</codeEntityReference>
        contains the value for a Parameter and it is linked to the meta data of 
        the Parameter through the 
        <codeInline>Info</codeInline>
        property. Each 
        <codeEntityReference>T:Jacobi.Vst.Framework.VstProgram</codeEntityReference>
        contains an instance of the
        <codeInline>VstParameter</codeInline>
        class for each 
        <codeInline>VstParameterInfo</codeInline>.
        Each 
        <codeInline>VstProgram</codeInline>
        contains the same Parameters (identified by
        <codeInline>VstParameterInfo</codeInline>
        ) but has unique values (stored by
        <codeInline>VstParameter</codeInline>
        ).
        One
        <codeEntityReference>T:Jacobi.Vst.Framework.VstParameterManager</codeEntityReference>
        instance associated with the
        <codeInline>VstParameterInfo</codeInline>
        manages the current (active) value of a 
        <codeInline>VstParameter</codeInline>.
        When a new 
        <codeInline>VstProgram</codeInline>
        is activated all its 
        <codeInline>VstParameter</codeInline>s
        are also activated and each Parameter's
        <codeInline>VstParameterManager</codeInline>
        receives a notification to fetch a new value from the
        <codeInline>VstParameter</codeInline>.
        </para>
        <para>
        Typically each sub-component of a Plugin (oscilators, envelopes, filters,
        etc.) publishes its Parameters to an internal Program factory by 
        providing
        <codeInline>VstParameterInfo</codeInline>
        instances with a
        <codeInline>VstParameterManager</codeInline>
        attached the sub-component uses to retrieve the actual Parameter value.
        These sub-components can be named using 
        <codeEntityReference>T:Jacobi.Vst.Framework.VstParameterCategory</codeEntityReference>
        instances attached to the
        <codeInline>VstParameterInfo</codeInline>
        objects. Hosts can than group related Parameters together in the UI.
        </para>
        <para>
        A 
        <codeEntityReference>T:Jacobi.Vst.Framework.VstProgram</codeEntityReference>
        instance represents one Plugin Program. All Programs for a Plugin are 
        stored in a
        <codeEntityReference>T:Jacobi.Vst.Framework.VstProgramCollection</codeEntityReference>
        instance implemented by the
        <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPrograms</codeEntityReference>
        interface.
        When the Hosts changes the Program for a plugin (or the user through a 
        generated UI), the Framework simply assigns the new Program to the
        <codeInline>ActiveProgram</codeInline>
        property. Here is a typical implementation of the
        <codeInline>ActiveProgram</codeInline>
        property.
        <codeReference>IVstPluginPrograms#ActiveProgram</codeReference>
        </para>
      </content>
    </section>
        
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPrograms</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.VstProgram</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.VstParameter</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.VstParameterManager</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginProgramsBase</codeEntityReference>
      
      <link xlink:href="c3df31da-acf5-4f57-8178-c00b1bc545ba"/>
      <link xlink:href="bf34ecc4-5cd1-4770-86fe-2cda55f05823"/>
      <externalLink>
        <linkText>VST.NET Programs and Parameters</linkText>
        <linkUri>http://obiwanjacobi.blogspot.com/2008/05/vstnet-programs-and-parameters.html</linkUri>
      </externalLink>
    
    </relatedTopics>
  </developerConceptualDocument>
</topic>