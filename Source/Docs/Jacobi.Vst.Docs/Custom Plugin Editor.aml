<?xml version="1.0" encoding="utf-8"?>
<topic id="b1420795-40cc-451e-8240-582023abe7ab" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
  <summary>
    <para>Introduce the concept. Mention auto generated host UI's for plugin 
    parameters. Cover the interface and the difference in lifetime between an
    instance that implements this interface and the control that implements
    the UI. Mention the UI wrapper and how to support WPF.</para>
  </summary>
  -->
    <introduction>
      <para>
      A lot of Hosts (if not all of them?) will auto-generate a UI for a Plugin
      that exposes Parameters. This UI can be used by the end user to manipulate 
      the Plugin. The following image shows an example of the Delay sample in 
      Cubase 2 SX.
      </para>
      
      <mediaLink>
        <caption placement="after" lead="Host Generated Plugin Editor UI">The Delay sample in Cubase 2 SX.</caption>
        <image xlink:href="f62de1d7-38fc-4992-991d-e35c64425a5d" />
      </mediaLink>
      
      <para>
      When a Plugin wishes to implement its own UI or does not 
      expose any Parameters it can implement the
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginEditor</codeEntityReference>
      interface. This interface exposes methods that are called by the Host to
      indicate when the Editor should be opened or closed (among others).
      </para>
      
      <alert class="note">
  		<para>
        It is important to note that the life time of the Editor UI (control) is
        <legacyBold>NOT</legacyBold> coupled to the lifetime of the object that implements the
        <codeInline>IVstPluginEditor</codeInline>
        interface.
        </para>
	  </alert>
    </introduction>

    <section address="WinForms">
      <title>WinForms Support</title>
      <content>
        <para>
        The Framework provides a class that can be used to host a WinForms (User)
        Control as the Editor (child) window. The
        <codeEntityReference>T:Jacobi.Vst.Framework.Common.WinFormsControlWrapper</codeEntityReference>
        class is a generic class that takes the type of the WinForms control
        to provide easy integration. Note that the
        <codeInline>Open</codeInline>
        and
        <codeInline>Close</codeInline>
        methods of the wrapper class map seamlesly to the methods on the
        <codeInline>IVstPluginEditor</codeInline>
        interface as well as the 
        <codeInline>Bounds</codeInline>
        property.
        </para>
        
        <para>
        Refer to the MidiNoteMapper sample for more information.
        </para>
      </content>
    </section>
    
    <section address="WpfForms">
      <title>Wpf Support</title>
      <content>
        <para>
        The Framework does <legacyUnderline>not</legacyUnderline> provide any 
        support for Wpf. That is because we would like to keep the .NET version
        dependency as low as possible (.NET Framework 2.0). Wpf support would
        require a minimum dependency on .NET Frameworl 3.0.
        </para>
        
        <para>
        But the CorePlugin does contain a sample of how one might implement a
        Wpf wrapper class. The 
        <codeEntityReference>T:Jacobi.Vst.Samples.CorePlugin.WpfControlWrapper</codeEntityReference>
        could be used to attach a Wpf Control to the unmanaged Windows Handle
        that is passed into the
        <codeInline>Open</codeInline>
        method of the 
        <codeInline>IVstPluginEditor</codeInline>
        interface.
        </para>
      </content>
    </section>
    
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginEditor</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Common.WinFormsControlWrapper</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Samples.CorePlugin.WpfControlWrapper</codeEntityReference>
      
      <link xlink:href="bf34ecc4-5cd1-4770-86fe-2cda55f05823"/>
      
    </relatedTopics>
  </developerConceptualDocument>
</topic>