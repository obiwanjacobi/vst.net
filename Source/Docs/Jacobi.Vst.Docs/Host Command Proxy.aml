<?xml version="1.0" encoding="utf-8"?>
<topic id="a6802bfe-1ae8-444e-abd5-dbe1a348f193" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
  <summary>
    <para>Explain where the Host Command Proxy is located (in the framework)
    and that it is more a conceptual term (unlike the Plugin Command Proxy 
    which is a real object). Explain that with the host interface the Stub
    performs the marshaling in interop.</para>
  </summary>
  -->
    <introduction>
      <para>The Host Command Proxy is used in the same way as the
    <link xlink:href="30e478e7-4eba-4eab-8a32-f9d9a2c4d2b3" />
    but in the oposite direction. The Host Command Proxy is an object (or 
    multiple as we will see) that lives inside the mananged Plugin and forwards
    managed calls from the Plugin to the Host. At "the other end" the 
    <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
    receives the call (inside the 
    <token>interop</token>
    assembly), converts the data types and calls the Host callback function 
    through a function pointer that was provide by the host during the Plugin
    loading sequence.
    </para>
    </introduction>
    
    <section address="Framework">
      <title>Inside the Framework</title>
      <content>
        <para>Although it does not bear the name of Host Command Proxy, there is
      one implemented in the 
      <token>framework</token>
      assembly, inside the Host namespace. This namespace only contains classes 
      that are internal (not public). The class that implements the
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHost</codeEntityReference>
      interface is the root object of the Host Command Proxy. The other 
      functionality of the Host is provided by other 
      <codeInline>IVstHostXxxx</codeInline>
      interfaces that only will be available to the Plugin if the Host supports
      the functionality they represent. There are also some methods that return
      a boolean as an indication wether they are supported or not.
      </para>
        <alert class="note">
          <para>The Host Command Proxy is not an object you have to write yourself
        unless you write a Core Level Plugin, and even then you have the choice
        of not writing one, but instead directly use the 
        <codeInline>IVstHostCommandStub</codeInline>
        interface that is passed to your Plugin.
        </para>
        </alert>
      </content>
    </section>
    
    <section address="ClassDiagram">
      <title>Class Diagram</title>
      <content>
        <para>The following class diagram details the Host Command Proxy as it is 
      implemented in the 
      <token>framework</token>
      assembly.
      </para>
        <mediaLink>
          <caption placement="after" lead="Class Diagram">The Host Command Proxy</caption>
          <image xlink:href="f510aae0-a362-46cf-b66b-f2eb78abab34" />
        </mediaLink>
        <para>The
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHost</codeEntityReference>
      class is the Host root object, same way we have a 
      <link xlink:href="62feac6e-0c75-4ef8-8703-fb970f81280b" />.
      The
      <codeInline>VstHost</codeInline>
      class exposes the Host capabilities (as an enum) and the Host product
      information (
      <codeEntityReference>T:Jacobi.Vst.Framework.VstProductInfo</codeEntityReference>).
      It implements the
      <codeEntityReference>T:Jacobi.Vst.Framework.IExtensible</codeEntityReference>
      interface to allow exposing other Host interfaces to the Plugin. These 
      interfaces are only available when the Host actually supports that 
      specific feature. So requesting a reference to the 
      <codeInline>IVstMidiProcessor</codeInline>
      interface while running inside a Host that does not support receiving Midi
      from a Plugin, will return null.
      </para>
        <para>The actual work of managing all the interface references for the 
      Host root object is performed by the
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostInterfaceManager</codeEntityReference>
      class. This class uses the
      <codeEntityReference>T:Jacobi.Vst.Framework.Common.InterfaceManager</codeEntityReference>
      class for each interface reference that in turn uses the
      <codeEntityReference>T:Jacobi.Vst.Framework.Common.ExtensibleInterfaceRef</codeEntityReference>
      class. This class maintains two interface references: one default 
      reference that is only used when called the Thread it was constructed on,
      and a Thread safe interface reference that is used when called from any 
      other Thread.
      </para>
        <para>The
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostMidiProcessor</codeEntityReference>
      class implements the
      <codeInline>IVstMidiProcessor</codeInline>
      inetrface for the Host. This allows a Plugin to send Midi information to
      the Host, if the Host supports receiving Midi events from the Plugin.
      </para>
        <para>The
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostSequencer</codeEntityReference>
      class implements the
      <codeInline>IVstHostSequencer</codeInline>
      interface that contains all the audio processing related information. This
      interface is always available although some methods return a boolean to 
      indicate if they are supported by the Host.
      </para>
        <para>The
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostShell</codeEntityReference>
      class implements the
      <codeInline>IVstHostShell</codeInline>
      interface that allows the Plugin to interact with the Host's shell. This
      interface is also always available although some methods return a boolean 
      to indicate if they are supported by the Host. The nested type
      <codeInline>FileSelectorScope</codeInline>
      implements the
      <codeInline>IDisposable</codeInline>
      interface that is returned from the
      <codeEntityReference>M:Jacobi.Vst.Framework.Host.VstHostShell.OpenFileSelector()</codeEntityReference>
      method and can be used by the Plugin to indicate how long the information
      is needed.
      </para>
        <para>The
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostAutomation</codeEntityReference>
      class implements the
      <codeInline>IVstHostAutomation</codeInline>
      interface that allows a Plugin to notify the Host of Parameter changes 
      that may be automated by the Host. It also exposes the Automation state of
      the Host to the Plugin. The
      <codeInline>EditParameterScope</codeInline>
      implements the
      <codeInline>IDisposable</codeInline>
      interface that is returned from the
      <codeEntityReference>M:Jacobi.Vst.Framework.Host.VstHostAutomation.EditParameter()</codeEntityReference>
      method and can be used by the Plugin to indicate that a parameter value 
      has changed.
      </para>
      </content>
    </section>
    
    <para>Jacobi.Vst.Framework</para>
    
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstHostCommandStub</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHost</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostAutomation</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostSequencer</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostShell</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHost</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostMidiProcessor</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostSequencer</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostShell</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHostAutomation</codeEntityReference>
      <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>