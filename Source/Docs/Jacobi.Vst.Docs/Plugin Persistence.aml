<?xml version="1.0" encoding="utf-8"?>
<topic id="9285210d-328b-495d-826e-9a20939004d1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
  <summary>
    <para>Detail why persistence is needed. Explain two modes of persistence 
    (program and bank). Mention size limits and (other) best practices.</para>
  </summary>
  -->
  
    <introduction>
      <para>
      In order for a user to have all its settings as they were when the Host
      application saves the work, each Plugin has to exposes in some way its
      internal settings. One of the easiest ways to do that is to support Plugin
      <link xlink:href="c3df31da-acf5-4f57-8178-c00b1bc545ba">Parameters</link>
      (and 
      <link xlink:href="da9d3d7d-c5f5-4d05-99a2-70b020f2cbfb">Programs</link>).
      This provides the Host with a structured way to
      extract the Plugin settings (Parameters) and save them into the file. When
      the file is loaded into the Host, each Plugin receives the original 
      Parameter values the song (or other work) was saved with.
      </para>
      <para>
      But exposing Parameters is not always possible or does not always 
      represent all of the Plugin's internal state. In those cases the Plugin
      must be in charge of (how) the data that is saved and loaded. When a 
      Plugin implements the 
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPersistence</codeEntityReference>
      interface it tells the Host it wants to be in charge of serializing its
      internal state into a 'chunk' of memory.
      </para>
      <para>
      There are two modes of operation. A Host can ask for either a single 
      preset (the current/active one) or for a whole bank of presets (all 
      Programs). This distinction is abstracted away by the VST.NET Framework 
      from the Plugin developer.
      </para>
    </introduction>

    <section address="FrameworkSupport">
      <title>Framework Support</title>
      <content>
        <para>
        When a Plugin supports the 
        <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPersistence</codeEntityReference>
        interface it is called when a Host wants to save the Plugin state to a 
        file or when the file is reloaded that contains a 'chunk' from the 
        Plugin. The Framework handles the preset or bank modes in how it fills 
        the
        <codeInline>VstProgramCollection</codeInline>
        method parameter passed to the
        <codeInline>ReadPrograms</codeInline>
        and
        <codeInline>WritePrograms</codeInline>
        methods. The implementation of these methods should simply look at the
        <codeInline>VstProgram</codeInline> collection passed into the method
        and serialize or deserialize those programs into or from the specified
        <codeInline>Stream</codeInline>.
        </para>
        
        <para>
        The 
        <codeInline>CanLoadChunk</codeInline>
        method is called just before a 'chunk' is sent to the Plugin. The Host
        has recorded the information on the Plugin version when it was saved. 
        Based on this information the Plugin can decide to abort or continue
        with loading the Plugin data.
        </para>
        
        <para>
        The Framework provides a base class for implementing the
        <codeInline>IVstPluginPersistence</codeInline>
        interface. The
        <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginPersistenceBase</codeEntityReference>
        uses the
        <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.IO.VstProgramWriter</codeEntityReference>
        and
        <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.IO.VstProgramReaderBase</codeEntityReference>
        classes. The
        <codeInline>VstProgramWriter</codeInline>
        can be used directly (without deriving from it) and writes the Program
        and Parameter information to a stream. Note that the objects are not
        serialized, only their key property values are. That is why the 
        counterpart of the writer class is abstract. The class that derives from
        the
        <codeInline>VstProgramReaderBase</codeInline>
        class implements the abstract method to create a Program with all of its
        Parameters. This goes back to the design principle that a Program is
        typically created from a Factory that aggregates all the Parameters used
        by all the sub-components of the Plugin. The
        <codeInline>VstProgramReaderBase</codeInline>
        class just performs a lookup base on the Parameter's name to set its 
        value.
        And this also explains why the
        <codeInline>VstPluginPersistenceBase</codeInline>
        class is also abstract because it needs an implementation of the
        <codeInline>VstProgramReaderBase</codeInline>
        class. Refer to the Delay sample for an example of an implementation of
        a
        <codeInline>VstPluginPersistenceBase</codeInline>
        class and a
        <codeInline>VstProgramReaderBase</codeInline>
        class.
        </para>
        
		<alert class="note">
		  <para>
		  Be aware of the amount of data you write into the (chunk) stream. Some 
		  Hosts do maintain maximum limits for the amount of data that can come
		  from a Plugin.
		  </para>
		</alert>

      </content>
    </section>
        
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginPersistence</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginPersistenceBase</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.IO.VstProgramWriter</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.IO.VstProgramReaderBase</codeEntityReference>
      <link xlink:href="c3df31da-acf5-4f57-8178-c00b1bc545ba"/>
      <link xlink:href="bf34ecc4-5cd1-4770-86fe-2cda55f05823"/>
      <externalLink>
        <linkText>VST.NET Persistence</linkText>
        <linkUri>http://obiwanjacobi.blogspot.com/2008/07/vstnet-plugin-persistence.html</linkUri>
      </externalLink>
    </relatedTopics>
  </developerConceptualDocument>
</topic>