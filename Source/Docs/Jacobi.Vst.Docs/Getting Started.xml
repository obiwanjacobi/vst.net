<?xml version="1.0" encoding="utf-8"?>
<developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <introduction>
    <para><legacyBold>Getting Started</legacyBold>
    will help you to get your first managed Plugin off the ground. In four short 
    steps you are guided along to produce a "working" Plugin. Although the 
    function of the Plugin is to pass on audio it receives, it does demonstrate
    what components come into play.</para>
    <para>The following sections will be mainly focused on the use of the
    <token>framework</token>
    assembly. But important or interesting information for Core level 
    implementations (not using the Framework) will be given in a separate
    section when appropriate.</para>
  </introduction>

  <section address="PrepareYourProject">
    <title>Prepare your Project</title>
    <content>
      <para>In 
      <link xlink:href="6057b859-b117-409a-a513-8ff470348e46">this section</link>
      you will prepare your Visual Studio Project by setting up a post-build 
      event. The statements in the post-build event will copy and rename the 
      <token>interop</token>
      assembly as well as the project output assembly, giving it a 
      <literal>.net.dll</literal>
      or a 
      <literal>.net.vstdll</literal>
      extension.</para>
      <para>These naming conventions for the assemblies are necessary to 
      correclty load the Managed Plugin in the (unmanaged) Host.
      </para>
    </content>
  </section>

  <section address="ImplementPluginCommandStub">
    <title>Implement the Plugin Command Stub</title>
    <content>
      <para>In 
      <link xlink:href="3feb73bb-72dd-4618-816f-f9f1c46d7f73">this section</link>
      you will create a public class that implements all the VST 2.4 methods. 
      Luckily all the hard work has been done in the
      <token>framework</token> 
      assembly and you just derive from a base class and override one virtual 
      method to create and return the Plugin Root Class.
      </para>
    </content>
  </section>

  <section address="ImplementPluginRootClass">
    <title>Implement the Plugin Root Class</title>
    <content>
      <para>In 
      <link xlink:href="2d6d5838-0551-4404-b5c8-698de8d41aa7">this section</link>
      you will implement a Plugin Root Class also by deriving from a base class 
      in the 
      <token>framework</token>
      assembly.
      </para>
      <para>The Plugin Root Class receives all requests for subsequent 
      interfaces, each representing a specific feature or area of the VST 2.4
      specification.</para>
    </content>
  </section>

  <section address="ImplementAudioProcessor">
    <title>Implement an Audio Processor</title>
    <content>
      <para>Most plugins implement an Audio Processor that deals with the audio
      samples that "flow" through the Plugin. In this section you will setup
      a dummy Audio Processor that does nothing but pass on the receieved 
      audio sample.</para>
      <para><link xlink:href="5e94bd76-fadd-4def-9e1a-261b18a42f0e">This section</link>
      demonstrates how the Plugin implements additional interfaces. All 
      framework interfaces are requested through the Plugin Root Class.
      </para>
    </content>
  </section>

  <relatedTopics>
    <link xlink:href="6057b859-b117-409a-a513-8ff470348e46"/>
    <link xlink:href="3feb73bb-72dd-4618-816f-f9f1c46d7f73"/>
    <link xlink:href="2d6d5838-0551-4404-b5c8-698de8d41aa7"/>
    <link xlink:href="5e94bd76-fadd-4def-9e1a-261b18a42f0e"/>
  </relatedTopics>
</developerConceptualDocument>
