<?xml version="1.0" encoding="utf-8"?>
<developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <!--
  <summary>
    <para>Explain where the Host Command Proxy is located (in the framework)
    and that it is more a conceptual term (unlike the Plugin Command Proxy 
    which is a real object). Explain that with the host interface the Stub
    performs the marshaling in interop.</para>
  </summary>
  -->

  <introduction>
    <para>The Host Command Proxy is used in the same way as the
    <link xlink:href="30e478e7-4eba-4eab-8a32-f9d9a2c4d2b3" />
    but in the oposite direction. The Host Command Proxy is an object (or 
    multiple as we will see) that lives inside the mananged Plugin and forwards
    managed calls from the Plugin to the Host. At "the other end" the 
    <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
    receives the call (inside the 
    <token>interop</token>
    assembly), converts the data types and calls the Host callback function 
    through a function pointer that was provide by the host during the Plugin
    loading sequence.
    </para>
  </introduction>

  <section address="Framework">
    <title>Inside the Framework</title>
    <content>
      <para>Although it does not bear the name of Host Command Proxy, there is
      one implemented in the 
      <token>framework</token>
      assembly, inside the Host namespace. This namespace does not show in the
      documentation because all its classes are internal. The class that
      implements the
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstHost</codeEntityReference>
      interface is the root of the Host Command Proxy. The other functionality 
      of the host is provided by other 
      <codeInline>IVstHostXxxx</codeInline>
      interfaces that only will be available to the Plugin if the Host supports
      the functionality they represent. There are also some methods that return
      a boolean as an indication wether they are supported or not.
      </para>
      
      <alert class="note">
        <para>The Host Command Proxy is not an object you have to write yourself
        unless you write a Core Level Plugin, and even then you have the choice
        of not writing one, but instead directly use the 
        <codeInline>IVstHostCommandStub</codeInline>
        interface that is passed to your Plugin.
        </para>
      </alert>
    </content>
  </section>

  <section address="ClassDiagram">
    <title>Class Diagram</title>
    <content>
      <para>The following class diagram details the Host Command Proxy as it is 
      implemented in the 
      <token>framework</token>
      assembly.
      </para>
      <mediaLink>
        <caption placement="after" lead="Class Diagram">The Host Command Proxy</caption>
        <image xlink:href="f510aae0-a362-46cf-b66b-f2eb78abab34" />
      </mediaLink>
    </content>
  </section>
  
  <relatedTopics>
    <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstHostCommandStub</codeEntityReference>
    <codeEntityReference>T:Jacobi.Vst.Framework.IVstHost</codeEntityReference>
    <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostAutomation</codeEntityReference>
    <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostSequencer</codeEntityReference>
    <codeEntityReference>T:Jacobi.Vst.Framework.IVstHostShell</codeEntityReference>
    <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
  </relatedTopics>
</developerConceptualDocument>
