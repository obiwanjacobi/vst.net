<?xml version="1.0" encoding="utf-8"?>
<developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <introduction>
    <para>One of the first objects that is instantiated during the loading 
    sequence of a VST Plugin is the Managed Plugin Factory only preceded by the
    <codeInline>AssemblyLoader</codeInline>. Together these objects determine 
    how managed Plugin assemblies are loaded.
    </para>
    <para>The following sequence describes the startup sequence in more detail.    
    <list class="bullet">
    
      <listItem>The host calls the VSTPluginMain exported function in the 
      renamed
      <token>interop</token>
      assembly. This assembly is renamed to resembly the managed Plugin's name 
      and the host thinks it is the actual plugin.</listItem>
      <listItem>The 
      <token>interop</token>
      assembly instantiates the
      <codeInline>AssemblyLoader</codeInline>
      class that resolves assemblies in the local plugin folder. This is the 
      folder that also contains the renamed 
      <token>interop</token>
      assembly. This is done so the
      <token>core</token>
      and
      <token>framework</token>
      assemblies can also be located in the local plugin folder.</listItem>
      
      <listItem>Next the
      <codeInline>ManagedPluginFactory</codeInline>
      is created. This class is located in the
      <token>core</token>
      assembly. It loads the managed Plugin assembly and creates the 
      <link xlink:href="bf904c4c-fdf7-4e94-8590-13d0b3d9baf6"/>.
      Then the rest of the loading sequence is executed (such as 
      retrieving Plugin capability information).</listItem>
      
    </list>

    </para>
  </introduction>

  <section address="AssemblyLoading">
    <title>Loading the Managed Plugin Assembly</title>
    <content>
      <para>
      The Managed Plugin Factory has a set of rules that determine where managed
      Plugin assemblies can be located and how they can be named.
      </para>
      <para>
      When the
      <codeInline>ManagedPluginFactory</codeInline>
      is created it is passed the file path (and name) of the renamed
      <token>interop</token>
      assembly and from that it comes up with to new file names: the name of the
      renamed <token>interop</token> assembly without its 
      <literal>.dll</literal>
      extension but with:
      <list class="bullet">
        <listItem><literal>.net.dll</literal></listItem>
        <listItem><literal>.net.vstdll</literal></listItem>
      </list>
      extensions.</para>
      <para>So if the name of the renamed
      <token>interop</token>
      assembly is
      <literal>MyVendor.MyProduct.MyPlugin.dll</literal>
      the name of the assembly that contains the managed Plugin must be in the 
      same folder and be named
      <literal>MyVendor.MyProduct.MyPlugin.net.dll</literal>
      or
      <literal>MyVendor.MyProduct.MyPlugin.net.vstdll</literal>.
      The 
      <literal>.net.vstdll</literal>
      extension was introduced to stop the hosts from loading the secondary 
      assembly that was no real VST plugin to host.
      </para>
      
      <para>When the managed Plugin assembly is loaded all types (classes)
      are iterated in search of a public class that implements the
      <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub</codeEntityReference>
      interface. That type is then instantiated and a reference is returned from 
      the factory. Once the VST Plugin loading sequence is done and the Plugin 
      is loaded, the 
      <codeInline>ManagedPluginFactory</codeInline>
      is not used anymore.</para>
    </content>
  </section>

  <relatedTopics>
  <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub</codeEntityReference>
  <link xlink:href="bf904c4c-fdf7-4e94-8590-13d0b3d9baf6"/>
  </relatedTopics>
</developerConceptualDocument>
