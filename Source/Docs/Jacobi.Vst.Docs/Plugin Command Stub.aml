<?xml version="1.0" encoding="utf-8"?>
<topic id="bf904c4c-fdf7-4e94-8590-13d0b3d9baf6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
  <summary>
    <para>Explain about the role of the Plugin Command Stub.</para>
  </summary>
  -->
    <introduction>
      <para>The Plugin Command Stub is the managed class that implements the
    <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub</codeEntityReference>
    interface. That class must be public in the managed Plugin assembly in order
    for the 
    <link xlink:href="4781d47a-3b7a-41a6-b632-4a6785082bfa" />
    to load it and pass it to the
    <link xlink:href="30e478e7-4eba-4eab-8a32-f9d9a2c4d2b3" />.
    The Plugin Command Stub receives calls on its methods from the Plugin 
    Command Proxy and dispatches them inside the managed Plugin. If you use the 
    <token>framework</token> 
    assembly to help with your implementation, its very
    easy to implement the Plugin Command Stub. If you program at Core level, 
    only using the
    <token>core</token>
    assembly, you have to implement all these methods (almost 60!) yourself. 
    </para>
    </introduction>
    
    <section address="Framework">
      <title>Using the Framework</title>
      <content>
        <para>When using the 
      <token>framework</token>
      assembly for your managed Plugin, you can take advantage of the provided
      Plugin Command Stub. The
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.StdPluginCommandStub</codeEntityReference>
      base class dispatches all calls to the (optional) interfaces a Plugin 
      can implement. These interfaces are all discovered through the
      <codeEntityReference>T:Jacobi.Vst.Framework.IExtensible</codeEntityReference>
      interface on the 
      <link xlink:href="62feac6e-0c75-4ef8-8703-fb970f81280b" />.
      </para>
        <para>When an interface is not supported by a Plugin implementation the stub 
      returns a value that indicates this. If the Plugin does support the 
      interface in question it is retrieved through the
      <codeEntityReference>M:Jacobi.Vst.Framework.IExtensible.GetInstance</codeEntityReference>
      method and the appropriate method on that interface is called. Most of the
      calls on the framework interfaces are more or less the same as the methods
      on the 
      <codeInline>IVstPluginCommandStub</codeInline>
      interface, there some exception however, where the framework adds an 
      abstraction to provide a clearer mechanism for the developer.
      <link xlink:href="da9d3d7d-c5f5-4d05-99a2-70b020f2cbfb" />,
      <link xlink:href="c3df31da-acf5-4f57-8178-c00b1bc545ba" /> 
      and
      <link xlink:href="ba4dbc74-d9b0-439a-b767-ada82c153a56" /> 
      are at a higher level of abstraction than the underlying VST types.
      </para>
      </content>
    </section>
    
    <section address="ClassDiagram">
      <title>Class Diagram</title>
      <content>
        <para>The following class diagram shows the classes involved in the 
      Framework implementation of the Plugin Command Stub.
      </para>
        <mediaLink>
          <caption placement="after" lead="Class Diagram">The Plugin Command Stub</caption>
          <image xlink:href="f34ce520-6a4c-45e3-bc4a-a45b6e4f448d" />
        </mediaLink>
        <para>The 
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.StdPluginCommandStub</codeEntityReference>
      implements the 
      <codeEntityReference>M:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub</codeEntityReference>
      interface. Each method dispatches its call to on of the interfaces through
      the
      <link xlink:href="62feac6e-0c75-4ef8-8703-fb970f81280b" />.
      The
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.VstPluginContext</codeEntityReference>
      class maintains the context in which the Plugin is running. The
      <codeEntityReference>T:Jacobi.Vst.Core.Plugin.VstPluginInfo</codeEntityReference>
      that is returned to the 
      <token>interop</token>
      assembly during the loading sequence and the
      <codeEntityReference>T:Jacobi.Vst.Framework.Host.VstHost</codeEntityReference>
      that encapsulates the
      <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstHostCommandStub</codeEntityReference>
      interface. The Plugin itself is created and a reference to its 
      implementation of the
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.IVstPlugin</codeEntityReference>
      interface is stored in the Plugin Context.
      </para>
      </content>
    </section>
    
    <section address="Core">
      <title>Core level Implementation</title>
      <content>
        <para>When using only the
      <token>core</token>
      assembly for your managed Plugin, you will have to implement all the 
      methods of the 
      <codeInline>IVstPluginCommandStub</codeInline> by hand. Although a lot of 
      these methods are optional it is clearly more work. To help you get 
      started use the code from the
      <link xlink:href="3feb73bb-72dd-4618-816f-f9f1c46d7f73" />
      section. Also look at the 
      <application>Jacobi.Vst.Samples.CorePlugin</application>
      sample application for it also implements a custom Plugin Command Stub.
      </para>
      </content>
    </section>
    
    <para>Jacobi.Vst.Framework</para>
    
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.StdPluginCommandStub</codeEntityReference>
      <link xlink:href="3feb73bb-72dd-4618-816f-f9f1c46d7f73" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>