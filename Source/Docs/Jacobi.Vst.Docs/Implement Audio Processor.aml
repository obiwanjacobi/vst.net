<?xml version="1.0" encoding="utf-8"?>
<topic id="5e94bd76-fadd-4def-9e1a-261b18a42f0e" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>There are three basic forms of 
    <link xlink:href="1977452f-9b2d-4d4f-a93c-768ab2ede63e" />
    a Plugin can perform.
    <list class="bullet">
    	<listItem>An Effect.</listItem>
    	<listItem>A Synthesizer.</listItem>
    	<listItem>A recorder (sampler).</listItem>
    </list>
    </para>
    <para>
	An effect Plugin will change the audio signal to produce the desired effect.
	Reverb, chorus and overdrive are examples of this. A Synthesizer Plugin
	generates an audio signal using either oscillators or pre-recorded sounds
	triggered by a Midi note event. A recording Plugin or sampler records the
	audio for playback at a later time. Playback is usually also trigged by 
	Midi note events.
	</para>
      <para>
	To implement any of these three types of audio processing a Plugin needs to 
	implement the 
	<codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginAudioProcessor</codeEntityReference>
	interface or the
	<codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginAudioPrecisionProcessor</codeEntityReference>
	interface. The 
	<codeInline>IVstPluginAudioPrecisionProcessor</codeInline>
	interface is only needed when you wish to perform audio processing in double
	in stead of single (float) precision.
	</para>
    </introduction>
    <section address="ImplementAudioProcessor">
      <title>Implement the Audio Processor</title>
      <content>
        <para>The following code snippet shows a very basic implementation of the
      <codeInline>IVstPluginAudioProcessor</codeInline>
      interface. It implements an audio through, passing the input to the output
      unchanged.
      </para>
        <codeReference>GettingStarted#ImplementAudioProcessor</codeReference>
      </content>
    </section>
    <section address="ChangeInterfaceManager">
      <title>Changing the Interface Manager</title>
      <content>
        <para>Just implementing the 
      <codeInline>IVstPluginAudioProcessor</codeInline>
      interface is not enough. The framework has no way of knowing that you have 
      done so. The 
      <codeInline>IExtensible</codeInline> interface on the Plugin root object 
      is used to discover the interfaces a Plugin supports. Assuming you use the
      <codeEntityReference>T:Jacobi.Vst.Framework.Plugin.PluginInterfaceManagerBase</codeEntityReference>
      base class either as a base class for your Plugin root object or as a base
      class for a seperate derived Interface Manager class, you have to override
      the 
      <codeEntityReference>M:Jacobi.Vst.Framework.Plugin.PluginInterfaceManagerBase.CreateAudioProcessor</codeEntityReference>
      virtual method. This method that is called when the
      <codeInline>IVstPluginAudioProcessor</codeInline>
      interface is requested for the first time and returns the instance of your
      <codeInline>IVstPluginAudioProcessor</codeInline>
      implementation.
      </para>
        <para>The following code snippet is the same as shown in the topic about 
      the
      <link xlink:href="62feac6e-0c75-4ef8-8703-fb970f81280b" /> and show a
      possible implementation for the 
      <codeInline>CreateAudioProcessor</codeInline>
      method.
      </para>
        <codeReference>GettingStarted#ImplementPluginRootClassVstPluginWithInterfaceManagerBase</codeReference>
        <alert class="warning">
          <para>You have to synchronize access to shared variables you use in the
        audio processor. Generally hosts use multiple threads to call into the
        different parts of a plugin. Refer to 
        <codeEntityReference>T:Jacobi.Vst.Core.VstProcessLevels</codeEntityReference>
        for more information.
        </para>
        </alert>
        <alert class="note">
          <para>Note that the implementation passes a reference to the Plugin root
        object to the constructor of the 
        <codeInline>AudioProcessor</codeInline> class. Although this was not 
        show in the code snippet in the previous section it is in general a 
        pattern that you will encounter; to tie the separate classes together.
        </para>
        </alert>
        <para>
      This example is also applicable to other interfaces in the 
      <token>framework</token>
      assembly. For each interface there is a corresponding 
      <codeInline>Create</codeInline> method on the 
      <codeInline>PluginInterfaceManagerBase</codeInline> base class.
      </para>
        <alert class="note">
          <para>Implementing audio processing for Core Level Plugins is basically
	    the same as shown here. There are two method overloads of
	    <codeEntityReference>M:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub.ProcessReplacing</codeEntityReference>
	    on the
	    <codeInline>IVstPluginCommandStub</codeInline>
	    interface. One is for single precision and one for double precision 
	    audio processing. You can implement 
	    <codeEntityReference>M:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub.SetProcessPrecision</codeEntityReference>
	    to receive an indication of which will be used (if supported by the 
	    host).
	    </para>
        </alert>
      </content>
    </section>
    <relatedTopics>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginAudioProcessor</codeEntityReference>
      <codeEntityReference>T:Jacobi.Vst.Framework.IVstPluginAudioPrecisionProcessor</codeEntityReference>
      <link xlink:href="1977452f-9b2d-4d4f-a93c-768ab2ede63e" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>