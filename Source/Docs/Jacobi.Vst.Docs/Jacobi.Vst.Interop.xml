<?xml version="1.0" encoding="utf-8"?>
<developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <introduction>
    <para>The 
    <token>interop</token>
    assembly is responsible for posing as a native VST Plugin and relaying the
    communication between Host and Plugin to the managed Plugin that implements
    the real functionality. It makes the type conversions necessary to go from
    unmanaged to managed and back again.
    </para>
    <alert class="note">
      <para>Due to the fact that the 
      <token>vs2008</token>
      class diagram editor for C++ does not support
      modeling managed types, there are no class diagrams of the internal 
      classes of the
      <token>interop</token>
      assembly.</para>
    </alert>
  </introduction>

  <section address="Interop">
    <title>Implementation Details</title>
    <content>
      <para>The
        <token>interop</token>
        assembly contains an exported function 
        <codeInline>VSTPluginMain</codeInline>
        that is called by the host and returns a 
        <codeInline>AEffect</codeInline>
        structure that contains initial information about the plugin. In this 
        structure there are several function pointers the host will call to
        call into the Plugin. The 
        <token>interop</token>
        assembly intercepts these calls and forwards these to the managed Plugin
        through the use of a 
        <link xlink:href="30e478e7-4eba-4eab-8a32-f9d9a2c4d2b3" />
        and 
        <link xlink:href="bf904c4c-fdf7-4e94-8590-13d0b3d9baf6" />
        pair, performing type conversion from unmanaged to managed types and visa 
        versa for the return values.</para>
        <para>The managed Plugin is created in two steps. The first step is 
        locating the managed Plugin assembly and loading the
        <link xlink:href="bf904c4c-fdf7-4e94-8590-13d0b3d9baf6" />
        and the second step is initializing it, passing it a reference to the
        <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
        and retrieving the Plugin information that is copied into the
        <codeInline>AEffect</codeInline>
        structure.
        </para>
    </content>
  </section>
  
  <relatedTopics>
    <link xlink:href="30e478e7-4eba-4eab-8a32-f9d9a2c4d2b3" />
    <link xlink:href="1386a1db-aa7f-437f-94d2-a6755e375ea6" />
  </relatedTopics>
</developerConceptualDocument>
