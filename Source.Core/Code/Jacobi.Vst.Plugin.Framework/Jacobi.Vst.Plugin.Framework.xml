<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jacobi.Vst.Plugin.Framework</name>
    </assembly>
    <members>
        <member name="T:Jacobi.Vst.Plugin.Framework.Common.NativeMethods">
            <summary>
            P/Invoke native methods.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2">
            <summary>
            A KeyedCollection base class that implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </summary>
            <typeparam name="KeyT">The type of collection item keys.</typeparam>
            <typeparam name="ValueT">The type of collection items.</typeparam>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.InsertItem(System.Int32,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.SetItem(System.Int32,`1)">
            <inheritdoc/>
        </member>
        <member name="E:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Fires the <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.CollectionChanged"/> event using single instances.
            </summary>
            <param name="action">The type of action that caused the collection to change.</param>
            <param name="newItem">Can be null.</param>
            <param name="oldItem">Can be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableKeyedCollection`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Constructs an instance with lists of old and new items.
            </summary>
            <param name="action">The type of action that caused the change.</param>
            <param name="newItems">Can be null.</param>
            <param name="oldItems">Can be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Common.ObservableObject">
            <summary>
            A base class for class that implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property on the class (this) that has changed.</param>
            <remarks>DEBUG builds veriry that the <paramref name="propertyName"/> 
            is actually found on the instance using reflection.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.SetProperty``1(``0,``0@,System.String)">
            <summary>
            Helper method for derived classes when setting a value on a property.
            </summary>
            <typeparam name="T">The data type of the property value.</typeparam>
            <param name="value">The value of the property to set.</param>
            <param name="field">A reference to the storage or backing field of the property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>Returns true when the value was actually set. 
            When the property already has the specified <paramref name="value"/> false is returned 
            and no event is raied.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1">
            <summary>
            This wrapper class makes it easy to use a WinForms (User) Control as an Editor UI.
            </summary>
            <typeparam name="T">The type of WinForms (User) Control.</typeparam>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Instance">
            <summary>
            Gets the instance of <typeparamref name="T"/>. Can be null.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.SafeInstance">
            <summary>
            Gets the instance of <typeparamref name="T"/>. Never null.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Open(System.IntPtr)">
            <summary>
            Shows the User Control <typeparamref name="T"/>.
            </summary>
            <param name="hWnd">The handle of the parent window.</param>
            <remarks>The instance of <typeparamref name="T"/> is attached as child window to the parent <paramref name="hWnd"/>.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Bounds">
            <summary>
            Gets the dimensions of the (User) Control.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Close">
            <summary>
            Closes and Disposes the (User) Control.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Dispose">
            <summary>
            Calls <see cref="M:Jacobi.Vst.Plugin.Framework.Common.WinFormsControlWrapper`1.Close"/>.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHost">
            <summary>
            Implements the proxy to the vst host.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHost.#ctor(Jacobi.Vst.Core.Plugin.IVstHostCommandStub,Jacobi.Vst.Plugin.Framework.IVstPlugin)">
            <summary>
            Constructs a new instance of the host class based on the <paramref name="hostCmdStub"/> 
            (from Interop) and a reference to the current <paramref name="plugin"/>.
            </summary>
            <param name="hostCmdStub">Must not be null.</param>
            <param name="plugin">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hostCmdStub"/> or 
            <paramref name="plugin"/> is not set to an instance of an object.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHost.HostCommandStub">
            <summary>
            Gets the Host Command Stub (Interop).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHost.Plugin">
            <summary>
            Gets the current Plugin instance.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHost.ProductInfo">
            <summary>
            Gets the product information of the vst host.
            </summary>
            <remarks>
            Implemented lazy with caching. First-time call will fire 3 callbacks to the host.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHost.Capabilities">
            <summary>
            Gets the vst host capabilities.
            </summary>
            <remarks>
            Implemented lazy with caching. Fires multiple CanDo requests at the host.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHost.ProcessLevel">
            <summary>
            Gets the vst host thread that is currently executing the plugin code (calling this property).
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHost.Supports``1">
            <summary>
            Indicates wheather a interface (or class) is supported by the host.
            </summary>
            <typeparam name="T">The type of interface or class.</typeparam>
            <returns>Returns true when the type <typeparamref name="T"/> is supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHost.GetInstance``1">
            <summary>
            Retrieves an instance (or null) for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of interface or class.</typeparam>
            <returns>Returns null when <typeparamref name="T"/> is not supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHost.Dispose">
            <summary>
            Called to dispose of this host instance.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostAutomation">
            <summary>
            Forwards the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstHostAutomation"/> calls to the host stub.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostAutomation.#ctor(Jacobi.Vst.Plugin.Framework.Host.VstHost)">
            <summary>
            Constructs an instance on the host proxy.
            </summary>
            <param name="host">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="host"/> is not set to an instance of an object.</exception>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostAutomation.EditParameterScope">
            <summary>
            Implements the scope for <see cref="M:Jacobi.Vst.Plugin.Framework.Host.VstHostAutomation.BeginEditParameter(Jacobi.Vst.Plugin.Framework.VstParameter)"/>.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostAutomation.EditParameterScope.Dispose">
            <summary>
            Called by the client when done with edit.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostMidiProcessor">
            <summary>
            Forwards the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor"/> calls to the host stub.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostMidiProcessor.#ctor(Jacobi.Vst.Plugin.Framework.Host.VstHost)">
            <summary>
            Constructs an instance on the host proxy.
            </summary>
            <param name="host">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="host"/> is not set to an instance of an object.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostMidiProcessor.ChannelCount">
            <summary>
            Always returns 16.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostMidiProcessor.Process(Jacobi.Vst.Plugin.Framework.VstEventCollection)">
            <summary>
            Passes the <paramref name="events"/> onto the host.
            </summary>
            <param name="events">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="events"/> is not set to an instance of an object.</exception>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer">
            <summary>
            Provides access to the sequencing functionality of the vst host.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer._host">
            <summary>Reference to the root host object.</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.#ctor(Jacobi.Vst.Plugin.Framework.Host.VstHost)">
            <summary>
            Constructs a new instance based on a root <paramref name="host"/> object.
            </summary>
            <param name="host">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="host"/> is not set to an instance of an object.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.SampleRate">
            <summary>
            Gets the current sample rate.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.BlockSize">
            <summary>
            Gets the current block size in bytes.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.InputLatency">
            <summary>
            Gets the input latency.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.OutputLatency">
            <summary>
            Gets the output latency.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.GetTime(Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            Retrieves time info in a specific format.
            </summary>
            <param name="filterFlags">Indicates the preferred time information format.</param>
            <returns>Returns time information but not necessarilly in the format specified by <paramref name="filterFlags"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostSequencer.UpdatePluginIO">
            <summary>
            Notify the host the plugin's IO has changed.
            </summary>
            <returns>Returns true if the host supports changing plugin IO at runtime.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostShell">
            <summary>
            Forwards the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstHostShell"/> methods to the host stub.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostShell.#ctor(Jacobi.Vst.Plugin.Framework.Host.VstHost)">
            <summary>
            Constructs an instance on the host proxy.
            </summary>
            <param name="host">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="host"/> is not set to an instance of an object.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Host.VstHostShell.Culture">
            <summary>
            Gets the culture of the host.
            </summary>
            <remarks>If the host does not implement the call to getLanguage, the current UI culture is returned.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostShell.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            Under construction!
            </summary>
            <returns>Returns null when the host does not support opening a file selector.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Host.VstHostShell.FileSelectorScope">
            <summary>
            Implements the scope for the file selector.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Host.VstHostShell.FileSelectorScope.Dispose">
            <summary>
            Call by the client when it is done with the file selector.
            </summary>
            <remarks>We do not check wheter or not the host supports closing the file selector...</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IActivatable">
            <summary>
            Indicates that the object can be activated and deactivated.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IActivatable.IsActive">
            <summary>
            Gets or sets the current activation state.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IExtensible">
            <summary>
            Allows a client to query for an interface (typically) that is dynamically implemented by the object.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IExtensible.Supports``1">
            <summary>
            Indicates if the interface <typeparamref name="T"/> is supported by the object.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns true if the interface <typeparamref name="T"/> is supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IExtensible.GetInstance``1">
            <summary>
            Retrieves a reference to an implementation of the interface <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns null when the <typeparamref name="T"/> is not supported.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstHost">
            <summary>
            Represents the root interface for (communicating with) the vst host.
            </summary>
            <remarks>
            The IVstHost interface derives from IExtensible and thus serves as 
            a root for querying for other interfaces.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHost.ProductInfo">
            <summary>
            Gets the product information of the vst host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHost.Capabilities">
            <summary>
            Gets the host capabilities.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHost.ProcessLevel">
            <summary>
            Gets the current process level (from what thread the plugin is called).
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstHostAutomation">
            <summary>
            Provides access to the autiomation functionality of the host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostAutomation.AutomationState">
            <summary>
            Gets the current automation state.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostAutomation.BeginEditParameter(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Starts an 'edit parameter' scope.
            </summary>
            <param name="parameter">The parameter to notify the host for. Must not be null.</param>
            <returns>Returns a tracker object to mark the end of the edit scope. 
            Can return null if the host does not support this.</returns>
            <remarks>Call <see cref="M:System.IDisposable.Dispose"/> on the return value to end the scope.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostAutomation.NotifyParameterValueChanged(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Notifies the Host that the value of the <paramref name="parameter"/>.
            </summary>
            <param name="parameter">Must not be null.</param>
            <remarks>
            The plugin can call this method to allow the parameter value change to be automated by the host.
            Assign the new value to the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> instance and pass it to this method to notify
            the host of the value change.
            </remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstHostSequencer">
            <summary>
            Provides access to the sequencing functionality of the host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.SampleRate">
            <summary>
            Gets the current sample rate.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.BlockSize">
            <summary>
            Gets the current block size in bytes.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.InputLatency">
            <summary>
            Gets the input latency.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.OutputLatency">
            <summary>
            Gets the output latency.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.GetTime(Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            Retrieves the current time information.
            </summary>
            <param name="filterFlags">Indicates the preferred time information format.</param>
            <returns>Returns time information but not necessarilly in the format specified by <paramref name="filterFlags"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.UpdatePluginIO">
            <summary>
            Notify the host the plugin's IO has changed.
            </summary>
            <returns>Returns true if the host supports changing plugin IO at runtime.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstHostShell">
            <summary>
            Provides access to the windowing shell of the host.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostShell.UpdateDisplay">
            <summary>
            Updates the host display.
            </summary>
            <returns>Returns true when the host support updating the window, otherwise false is returned.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostShell.SizeWindow(System.Int32,System.Int32)">
            <summary>
            Sizes the window to the specified <paramref name="width"/> and <paramref name="height"/>.
            </summary>
            <param name="width">New width of the window in pixels.</param>
            <param name="height">New height of the window in pixels.</param>
            <returns>Returns true when the host support sizing the window, otherwise false is returned.</returns>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostShell.Culture">
            <summary>
            Gets the culture the host is running in.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstHostShell.BaseDirectory">
            <summary>
            Gets the plugin base directory of the host.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstHostShell.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            Opens the File Selector.
            </summary>
            <param name="fileSelect">Information on how the file selector should behave and selected paths.</param>
            <returns>Returns null if the host does not support the Open File Selector.</returns>
            <remarks>Call <see cref="M:System.IDisposable.Dispose"/> on the return value to close the File Selector.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor">
            <summary>
            This interface is used to pass on incoming Midi data.
            </summary>
            <remarks>
            The host implements this interface to allow the plugin to send the host Midi data.
            A Plugin can implement this interface to receieve Midi data from the host.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor.ChannelCount">
            <summary>
            Gets the number of Midi channels supported.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor.Process(Jacobi.Vst.Plugin.Framework.VstEventCollection)">
            <summary>
            Called to process the specified Midi <paramref name="events"/>.
            </summary>
            <param name="events">Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPlugin">
            <summary>
            This interface is implemented by the Plugin root object.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.ProductInfo">
            <summary>
            Retrieves product information for the plugin (instance).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.Category">
            <summary>
            Gets the category of the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.Capabilities">
            <summary>
            Gets the additional capabilities of the plugin.
            </summary>
            <remarks>Almost all plugin capabilities in VST.NET are expressed by implementing interfaces. 
            But some characteristics of a plugin do not map to an interface. <seealso cref="T:Jacobi.Vst.Plugin.Framework.VstPluginCapabilities"/></remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.InitialDelay">
            <summary>
            Gets the initial delay (in samples??)
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.PluginID">
            <summary>
            Gets the unique identifier of the plugin represented as a 4 character code.
            </summary>
            <remarks>This method will be refactored in a fututre version to return a string.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPlugin.Open(Jacobi.Vst.Plugin.Framework.IVstHost)">
            <summary>
            The host will call this method when the plugin is loaded and should open its resources.
            </summary>
            <param name="host">A reference to the Host root interface. This reference can be used to 
            query for other host interfaces. Must not be null.</param>
            <remarks>Open is a good time to allocate large memory blocks when you use a pre-allocated 
            memory scheme in your plugin. The <see cref="M:System.IDisposable.Dispose"/> method will be called just before 
            your plugin is unloaded to release allocated resources.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPlugin.Suspend">
            <summary>
            Called by the host when the user has turned off your plugin.
            </summary>
            <remarks>Your plugin is NOT being unloaded by the host. The user just turned it off.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPlugin.Resume">
            <summary>
            Called by the host when the user has turned on your plugin.
            </summary>
            <remarks>Your plugin can receive multiple <see cref="M:Jacobi.Vst.Plugin.Framework.IVstPlugin.Suspend"/>/Resume calls during its lifetime.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor">
            <summary>
            A plugin implements this interface when it processes audio.
            </summary>
            <remarks>Effect plugins will use both input and output channels. 
            Instrument plugins will typically only use the output audio channels. 
            Sampler plugins typically use both input (for recording) and output (for playback) audio channels.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.InputCount">
            <summary>
            Gets the number of input audio channels the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.OutputCount">
            <summary>
            Gets the number of output audio channels the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.TailSize">
            <summary>
            Gets the number of samples that the plugin will output when audio input has stopped.
            </summary>
            <remarks>A delay, for instance, can still produce audio output when audio input has stopped.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.SampleRate">
            <summary>
            Gets or sets the sample rate that is used by the host.
            </summary>
            <remarks>The host will call into the plugin to set the sample rate (that call ends up here).
            When the sample rate changes, the plugin should prepare its inner structures (pre-allocated 
            memory buffer etc.) to accomodate the new sample rate.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.BlockSize">
            <summary>
            Gets or sets the number of samples (per channel) that will be passed to the <see cref="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.Process(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])"/> method.
            </summary>
            <remarks>The host will call into the plugin to set the block size (that call ends up here).
            When the block size changes, the plugin should prepare its inner structures (pre-allocated 
            memory buffer etc.) to accomodate the new block size.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.Process(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            Called by the host repeatedly to allow the plugin to process the incoming audio and/or output altered audio.
            </summary>
            <param name="inChannels">An array with audio channels that contain the audio input.</param>
            <param name="outChannels">An array with audio channels to which the plugin can write its audio output.</param>
            <remarks>The size of the array of <paramref name="inChannels"/> and <paramref name="outChannels"/> is not 
            guarenteed to be equal to the <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.InputCount"/> and <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.OutputCount"/> property. 
            VST.NET just passes on what it receieves from the host.
            This method is called when the host calls processReplacing. 
            Refer to the VST SDK documentation for more information on processReplacing.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.SetPanLaw(Jacobi.Vst.Core.VstPanLaw,System.Single)">
            <summary>
            Informs the plugin of the pan algorithm to use.
            </summary>
            <param name="type">The pan algorithm type.</param>
            <param name="gain">A gain factor.</param>
            <returns>Returns true when the plugin support setting the pan law.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioPrecisionProcessor">
            <summary>
            This interface can be implemented by plugins that want to support double precision audio samples.
            </summary>
            <remarks>Note that this interface derives from <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> and that a
            plugin that supports double precision should also support 'normal' audio processing. 
            Not all hosts support double precision audio samples.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioPrecisionProcessor.Process(Jacobi.Vst.Core.VstAudioPrecisionBuffer[],Jacobi.Vst.Core.VstAudioPrecisionBuffer[])">
            <summary>
            Called by the host repeatedly to allow the plugin to process the incoming audio and/or output altered audio.
            </summary>
            <param name="inChannels">An array with audio channels that contain the audio input.</param>
            <param name="outChannels">An array with audio channels to which the plugin can write its audio output.</param>
            <remarks>All remarks mentioned by <see cref="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.Process(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])"/> also apply here.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginBypass">
            <summary>
            This interface is implemented by plugins that allow the host to by pass them.
            </summary>
            <remarks>Bypassing can mean not interpret incoming midi or passing incoming audio to the output.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginBypass.Bypass">
            <summary>
            Gets or sets the bypass status.
            </summary>
            <remarks>The host's call to bypass the plugin ends up here when the interface is implemented by the plugin.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginConnections">
            <summary>
            This interface is implemented when the plugin whishes to reveal more about its connections.
            </summary>
            <remarks>This interface is still under construction.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginConnections.AcceptNewArrangement(Jacobi.Vst.Core.VstSpeakerArrangement,Jacobi.Vst.Core.VstSpeakerArrangement)">
            <summary>
            Called by the host to propose a new speaker arrangement.
            </summary>
            <param name="input">Must not be null.</param>
            <param name="output">Must not be null.</param>
            <returns>Returns true when the plugin accepts the proposed arrangements.</returns>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginConnections.InputSpeakerArrangement">
            <summary>
            Gets the input speaker arrangement.
            </summary>
            <remarks>Still under construction.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginConnections.OutputSpeakerArrangement">
            <summary>
            Gets the output speaker arrangement.
            </summary>
            <remarks>Still under construction.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginConnections.InputConnectionInfos">
            <summary>
            Gets the collection of connection information for the inputs.
            </summary>
            <remarks>Still under construction.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginConnections.OutputConnectionInfos">
            <summary>
            Gets the collection of connection information for the outputs.
            </summary>
            <remarks>Still under construction.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor">
            <summary>
            This interface is implemented when a plugin support a custom editor (UI).
            </summary>
            <remarks>The editor is a custom GUI that display the plugin's settings.
            Note that the life time of the GUI form is NOT linked to the lifetime of 
            the instance of the class that implements this interface. <seealso cref="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.Close"/></remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.KnobMode">
            <summary>
            Gets or sets the knob mode.
            </summary>
            <remarks>The host calls into the plugin to set the knob mode, which ends up here.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.Bounds">
            <summary>
            Gets the dimensions of the UI form.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.Open(System.IntPtr)">
            <summary>
            Called by the host when the UI should be displayed.
            </summary>
            <param name="hWnd">This is the handle of the parent window.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.ProcessIdle">
            <summary>
            Called by the host when some idle time is available.
            </summary>
            <remarks>Keep your processing short.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.Close">
            <summary>
            Called by the host when the UI form must be closed.
            </summary>
            <remarks>The instance of the object implementing this interface is not terminated.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.KeyDown(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user presses a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns true if the key is handled.</returns>
            <remarks>Typically this method requires no implementation when using WinForms.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginEditor.KeyUp(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user releases a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns true if the key is handled.</returns>
            <remarks>Typically this method requires no implementation when using WinForms.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginMidiPrograms">
            <summary>
            This interface is implemented by a plugin that supports Midi and wants the enable Midi Programs.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginMidiPrograms.ChannelInfos">
            <summary>
            Gets the collection of Midi Program info instances for each channel.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginMidiSource">
            <summary>
            This interface is implemented when a plugin wants to output Midi events to the host.
            </summary>
            <remarks>When a plugin calls the <see cref="M:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor.Process(Jacobi.Vst.Plugin.Framework.VstEventCollection)"/> of the 
            host and it does not implement this interface, an exception is thrown.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginMidiSource.ChannelCount">
            <summary>
            Gets the number of channels the plugin supports for Midi Out.
            </summary>
            <remarks>Called by the host.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters">
            <summary>
            This interface is implemented to publish information about the Parameters that control the plugin.
            </summary>
            <remarks>When you also support Programs you do not need to implement this interface explicitly. <seealso cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/></remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginParameters.Categories">
            <summary>
            Gets the available parameter categories.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginParameters.Parameters">
            <summary>
            Gets the parameter values.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence">
            <summary>
            A plugin implements this interface when it whishes to manually (de)serialze the plugin state.
            </summary>
            <remarks>When your plugin state can be fully expressed in Programs and Parameters 
            you do NOT need to implement this interface.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence.ReadPrograms(System.IO.Stream,Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Reads chunks for all programs from the <paramref name="stream"/>.
            </summary>
            <param name="stream">Must not be null.</param>
            <param name="programs">Receives the new <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/> instances. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence.WritePrograms(System.IO.Stream,Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Writes chunks for all programs in <paramref name="programs"/> to the <paramref name="stream"/>.
            </summary>
            <param name="stream">Must not be null.</param>
            <param name="programs">Contains the <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/>s that should be serialized into the <paramref name="stream"/>. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence.CanLoadChunk(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            Called to verify if a specific data version is supported.
            </summary>
            <param name="chunkInfo">Version info for chunk. Must not be null.</param>
            <returns>Returns true if data version is supported, otherwise false is returned.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginProcess">
            <summary>
            This interface is implemented when the plugin whishes to receive pre and post <see cref="M:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.Process(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])"/> calls.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginProcess.Start">
            <summary>
            Called just before Process is called.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginProcess.Stop">
            <summary>
            Called just after Process is called.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms">
            <summary>
            This interface should be implemented when the plugin want to support Programs.
            </summary>
            <remarks>The implementor must initialize the plugin programs as appropriate. 
            Each <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/> contains a full list of plugin Parameters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.Programs">
            <summary>
            Gets all the Programs.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.ActiveProgram">
            <summary>
            Gets or sets the program that is currently active in the Plugin.
            </summary>
            <remarks>Note to implementor: You must not return null. 
            When no program is active, activate the first in the list.
            A null value can be set.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.BeginSetProgram">
            <summary>
            Called by the host just before a Program is set (activated).
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.EndSetProgram">
            <summary>
            Called by the host just after a Program is set (activated).
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase">
            <summary>
            The VstProgramReaderBase class provides a stream reader base class that reads
            Program and Parameter information.
            </summary>
            <remarks>
            The way the Program and Parameter information is read is dependent on the way
            this data was written by the <see cref="T:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter"/> class.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new instancebased on the <paramref name="input"/> stream.
            </summary>
            <param name="input">A stream that contains data that was previously written by the 
            <see cref="T:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter"/> class. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a new instancebased on the <paramref name="input"/> stream.
            </summary>
            <param name="input">A stream that contains data that was previously written by the 
            <see cref="T:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter"/> class. Must not be null.</param>
            <param name="encoding">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.Reader">
            <summary>
            Gets the reader that derived classes can use to perform custom reads.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.CreateProgram">
            <summary>
            The derived class implements this method to create an empty -default- 
            Progarm containing all Plugin Parameters.
            </summary>
            <returns>Never returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.ReadPrograms(Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Reads the stream and fills the <paramref name="programs"/> colllection with programs.
            </summary>
            <param name="programs">The collection does not have to be empty. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.ReadProgram">
            <summary>
            Returns a new Program instance initialized with the values read from the stream.
            </summary>
            <returns>Never returns null.</returns>
            <remarks>
            The Parameters are also read.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.ReadParameters(Jacobi.Vst.Plugin.Framework.VstParameterCollection)">
            <summary>
            Fills the <paramref name="parameters"/> collection with Parameters.
            </summary>
            <param name="parameters">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.OnParameterNotFound(Jacobi.Vst.Plugin.Framework.VstParameterCollection,System.String,System.Single)">
            <summary>
            Called when a Parameter could not be found by name.
            </summary>
            <param name="parameters">The parameters that were discovered untill now. Can be used to add another Parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.ReadProgramHeader(Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Reads a Program header from the stream.
            </summary>
            <param name="programs">Must not be null.</param>
            <returns>Returns the number of Programs expected after the header.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramReaderBase.ReadParameterHeader(Jacobi.Vst.Plugin.Framework.VstParameterCollection)">
            <summary>
            Reads the Parameter header from the stream.
            </summary>
            <param name="parameters">Must not be null.</param>
            <returns>Returns the number of Parameters expected after the header.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter">
            <summary>
            The VstProgramWriter class writes Programs and its Parameters to a stream.
            </summary>
            <remarks>
            The objects themselves are not serialized, only identifying information 
            (name) and the Parameter values.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new instance on an <paramref name="output"/> stream.
            </summary>
            <param name="output">Will receive the data written. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a new instance on an <paramref name="output"/> stream.
            </summary>
            <param name="output">Will receive the data written. Must not be null.</param>
            <param name="encoding">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.Writer">
            <summary>
            Gets the writer used for writing to the output stream.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.Write(Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Writes the Programs in the <paramref name="programs"/> collection to the output stream.
            </summary>
            <param name="programs">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.Write(Jacobi.Vst.Plugin.Framework.VstProgram)">
            <summary>
            Writes the <paramref name="program"/> to the output stream.
            </summary>
            <param name="program">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.Write(Jacobi.Vst.Plugin.Framework.VstParameterCollection)">
            <summary>
            Writes the Parameters in <paramref name="parameters"/> to the output stream.
            </summary>
            <param name="parameters">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.Write(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Writes the <paramref name="parameter"/> to the output stream.
            </summary>
            <param name="parameter">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.WriteProgramHeader(Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Writes a header for the <paramref name="programs"/> to the output stream.
            </summary>
            <param name="programs">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.IO.VstProgramWriter.WriteParameterHeader(Jacobi.Vst.Plugin.Framework.VstParameterCollection)">
            <summary>
            Writes a header for the <paramref name="parameters"/> to the output stream.
            </summary>
            <param name="parameters">Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.ServiceCollectionExtensions">
            <summary>
            ServiceCollection helpers
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.ServiceCollectionExtensions.AddPluginComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)">
            <summary>
            Adds all interfaces and the class type of <paramref name="instance"/> to <paramref name="services"/>.
            </summary>
            <param name="services">Must not be null.</param>
            <param name="instance">Does nothing if null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub">
            <summary>
            The StdPluginCommandStub class provides a default implementation for adapting the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> 
            interface calls to the framework.
            </summary>
            <remarks>Each plugin must implement a public class the implements the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> interface.
            Plugins that use the framework can just derive from this class and override the <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CreatePluginInstance"/> method
            to create their plugin root object.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.Plugin">
            <summary>
            Provides derived classes accces to the root object of the Plugin.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetPluginInfo(Jacobi.Vst.Core.Plugin.IVstHostCommandStub)">
            <summary>
            Called by the Interop loader to retrieve the plugin information.
            </summary>
            <param name="hostCmdStub">Must not be null.</param>
            <returns>Returns a fully populated <see cref="T:Jacobi.Vst.Core.Plugin.VstPluginInfo"/> instance. Never returns null.</returns>
            <remarks>Override <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CreatePluginInfo(Jacobi.Vst.Plugin.Framework.IVstPlugin)"/> to change the default behavior of how the plugin info is built.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.PluginConfiguration">
            <summary>
            Gets or sets the custom plugin specific configuration object.
            </summary>
            <remarks>Can be null if the plugin has not deployed a config file.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetProcessPrecision(Jacobi.Vst.Core.VstProcessPrecision)">
            <summary>
            Called by the host query inform the plugin on the precision of audio processing it supports.
            </summary>
            <param name="precision">An indication of either 32 bit or 64 bit samples.</param>
            <returns>Returns true when the requested <paramref name="precision"/> is supported.</returns>
            <remarks>The implementation just queries the plugin for the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> and
            <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioPrecisionProcessor"/> interfaces. Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetNumberOfMidiInputChannels">
            <summary>
            Called by the host to retrieve the number of Midi In channels the plugin supports.
            </summary>
            <returns>Returns the number of Midi In channels, or 0 (zero) if not supported.</returns>
            <remarks>The implementation queries the plugin for the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetNumberOfMidiOutputChannels">
            <summary>
            Called by the host to retrieve the number of Midi Out channels the plugin supports.
            </summary>
            <returns>Returns the number of Midi Out channels, or 0 (zero) if not supported.</returns>
            <remarks>The implementation queries the plugin for the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginMidiSource"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement@,Jacobi.Vst.Core.VstSpeakerArrangement@)">
            <summary>
            Returns the speaker arrangements for the input and output of the plugin.
            </summary>
            <param name="input">Filled with the speaker arrangement for the plugin inputs.</param>
            <param name="output">Filled with the speaker arrangement for the plugin outputs.</param>
            <returns>Returns true when the plugin implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginConnections"/> interfcace.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetNextPlugin(System.String@)">
            <summary>
            Not implemented for managed plugins!
            </summary>
            <param name="name">Filled with the name of the next sub-plugin.</param>
            <returns>Returns the unique id of the next sub-plugin.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.StartProcess">
            <summary>
            Called just before Process cycle is started.
            </summary>
            <returns>Returns 0 (zero) when not supported. It is unclear what this return value represents.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.StopProcess">
            <summary>
            Called just after Process cycle is stopped.
            </summary>
            <returns>Returns 0 (zero) when not supported. It is unclear what this return value represents.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetPanLaw(Jacobi.Vst.Core.VstPanLaw,System.Single)">
            <summary>
            Informs the plugin of the pan algorithm to use.
            </summary>
            <param name="type">The pan algorithm type.</param>
            <param name="gain">A gain factor.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.BeginLoadBank(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            Called by the host to query the plugin that supports persistence if the chunk can be read.
            </summary>
            <param name="chunkInfo">Must not be null.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstCanDoResult.Yes"/> if the plugin can read the data.</returns>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.BeginLoadProgram(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            Called by the host to query the plugin that supports persistence if the chunk can be read.
            </summary>
            <param name="chunkInfo">Must not be null.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstCanDoResult.Yes"/> if the plugin can read the data.</returns>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorKeyDown(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user presses a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns true when the plugin implements <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/>.</returns>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorKeyUp(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user releases a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns true when the plugin implements <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/>.</returns>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/> interface. 
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetEditorKnobMode(Jacobi.Vst.Core.VstKnobMode)">
            <summary>
            Called by the host to set the mode for turning knobs.
            </summary>
            <param name="mode">The mode to use for turning knobs.</param>
            <returns>Returns true when the mode was set on the plugin editor.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            Retrieves information about a midi program for a specific Midi <paramref name="channel"/>.
            </summary>
            <param name="midiProgramName">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the number of implemented Midi programs.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetCurrentMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            Retrieves information about the current midi program for a specific Midi <paramref name="channel"/>.
            </summary>
            <param name="midiProgramName">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the number of implemented Midi programs.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetMidiProgramCategory(Jacobi.Vst.Core.VstMidiProgramCategory,System.Int32)">
            <summary>
            Retrieves information about a Midi Program Category.
            </summary>
            <param name="midiCat">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the total number of Midi program categories.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.HasMidiProgramsChanged(System.Int32)">
            <summary>
            Indicates if the program names or key names for the specified Midi <paramref name="channel"/> has changed.
            </summary>
            <param name="channel">The zero-base Midi channel.</param>
            <returns>Returns true if the Midi Program has changed, otherwise false is returned.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetMidiKeyName(Jacobi.Vst.Core.VstMidiKeyName,System.Int32)">
            <summary>
            Retrieves information about a Midi Key (or note).
            </summary>
            <param name="midiKeyName">Must not be null.</param>
            <param name="channel">The zero-base Midi channel.</param>
            <returns>Returns true when the <paramref name="midiKeyName"/>.Name was filled.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.BeginSetProgram">
            <summary>
            Called by the host just before a new Program is set.
            </summary>
            <returns>Returns true when the call was forwarded to the plugin's <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> implementation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EndSetProgram">
            <summary>
            Called by the host just after a new Program is set.
            </summary>
            <returns>Returns true when the call was forwarded to the plugin's <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> implementation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            Called by the host when the plugin has implemented the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstMidiProcessor"/> interface.
            </summary>
            <param name="events">The (Midi) events for the current 'block'.</param>
            <returns>Returns true when the call was forwarded to the plugin.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CanParameterBeAutomated(System.Int32)">
            <summary>
            Called by the host to query the plugin whether the parameter at <paramref name="index"/> can be automated.
            </summary>
            <param name="index">The zero-based index into the parameters.</param>
            <returns>Returns the value of the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.CanBeAutomated"/> of the parameter at <paramref name="index"/> 
            or false if the plugin does not support parameters.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.String2Parameter(System.Int32,System.String)">
            <summary>
            Parses the <paramref name="str"/> value to assign to the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-base parameter index.</param>
            <param name="str">The value for the parameter.</param>
            <returns>Returns true when the parameter was successfully parsed. 
            Returns false when the plugin does not implement parameters.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetProgramNameIndexed(System.Int32)">
            <summary>
            Retrieves the name of the program at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-base index into the plugin Programs.</param>
            <returns>Returns null when the plugin does not implement Programs.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetInputProperties(System.Int32)">
            <summary>
            Retrieves the pin properties for the input at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin inputs.</param>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginConnections"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetOutputProperties(System.Int32)">
            <summary>
            Retrieves the pin properties for the output at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin outputs.</param>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginConnections"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetCategory">
            <summary>
            Returns the plugin category.
            </summary>
            <returns>Returns the <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.Category"/> value.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement,Jacobi.Vst.Core.VstSpeakerArrangement)">
            <summary>
            Called by the host to propose a new speaker arrangement.
            </summary>
            <param name="saInput">Must not be null.</param>
            <param name="saOutput">Must not be null.</param>
            <returns>Returns false if the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginConnections"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetBypass(System.Boolean)">
            <summary>
            Called by the host to bypass plugin processing.
            </summary>
            <param name="bypass">True to bypass, false to process.</param>
            <returns>Returns false when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginBypass"/> interface.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetEffectName">
            <summary>
            Called by the host to retrieve the name of plugin.
            </summary>
            <returns>Returns the value of <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.Name"/>.</returns>
            <remarks>The plugin name should not exceed 32 characters.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the name exceeds 31 characters.</exception>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetVendorString">
            <summary>
            Called to retrieve the plugin vendor information.
            </summary>
            <returns>Returns <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.ProductInfo"/>.Vendor.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetProductString">
            <summary>
            Called to retrieve the plugin product information.
            </summary>
            <returns>Returns <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.ProductInfo"/>.Product.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetVendorVersion">
            <summary>
            Called to retrieve the plugin version information.
            </summary>
            <returns>Returns <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPlugin.ProductInfo"/>.Version.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CanDo(System.String)">
            <summary>
            Called by the host to query the plugin if a certain behavior or aspect is supported.
            </summary>
            <param name="cando">The string containing the can-do string, which can be host specific.</param>
            <returns>Returns an indication if the capability is supported.</returns>
            <remarks>The implementation handles all options in the <see cref="T:Jacobi.Vst.Core.VstPluginCanDo"/> enum.
            Override in derived class to implement custom cando behavior.
            <seealso cref="M:Jacobi.Vst.Core.VstCanDoHelper.ParsePluginCanDo(System.String)"/></remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetTailSize">
            <summary>
            Called by the host to retrieve the number of samples that the plugin outputs after the input has gone silent.
            </summary>
            <returns>Returns <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor.TailSize"/> or zero if not implemented by the plugin.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetParameterProperties(System.Int32)">
            <summary>
            Called by the host to retrieve information about a plugin parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin parameters.</param>
            <returns>Returns a fully filled instance of <see cref="T:Jacobi.Vst.Core.VstParameterProperties"/>.</returns>
            <remarks>The implementation uses the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> interface, the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> 
            at <paramref name="index"/> and the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterInfo"/> attached to the parameter 
            to fill the <see cref="T:Jacobi.Vst.Core.VstParameterProperties"/> instance.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetVstVersion">
            <summary>
            Called by the host to query the plugin what VST version it supports.
            </summary>
            <returns>Always returns 2400: VST 2.4.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.Open">
            <summary>
            This is the first method called by the host right after the assembly is loaded.
            </summary>
            <remarks>Always call the base class when overriding.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the HostCommandStub has not been initialized.</exception>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.Close">
            <summary>
            This is the last method the host calls. Dispose your resources.
            </summary>
            <remarks>Always call the base class when overriding.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetProgram(System.Int32)">
            <summary>
            The plugin should activate the Program at <paramref name="programNumber"/>.
            </summary>
            <param name="programNumber">A zero-based program number (index).</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetProgram">
            <summary>
            Retrieve the current program index.
            </summary>
            <returns>Returns zero when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> interface
            or no active program was set; <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.ActiveProgram"/> returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetProgramName(System.String)">
            <summary>
            Assign a new name to the current/active program.
            </summary>
            <param name="name">The new program name.</param>
            <remarks>
            The implementation uses the <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.ActiveProgram"/> to set the name.
            The name will not be set when the active program (preset) is read-only.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetProgramName">
            <summary>
            Retrieves the name of the current/active program.
            </summary>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> 
            or when the active program is not set.</returns>
            <remarks>The implementation uses the <see cref="P:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms.ActiveProgram"/> to get the name.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetParameterLabel(System.Int32)">
            <summary>
            Retrieves the label for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> 
            or when <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.ShortLabel"/> was not set.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetParameterDisplay(System.Int32)">
            <summary>
            Retrieves the display value for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> 
            or when <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameter.DisplayValue"/> was not set.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetParameterName(System.Int32)">
            <summary>
            Retrieves the name for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns null when the plugin does not implement <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> 
            or when <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.Name"/> was not set.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetSampleRate(System.Single)">
            <summary>
            Assigns the <paramref name="sampleRate"/> to the plugin.
            </summary>
            <param name="sampleRate">The number of audio samples per second.</param>
            <remarks>The implementation uses the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> interface. Override to change behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetBlockSize(System.Int32)">
            <summary>
            Assigns the <paramref name="blockSize"/> to the plugin.
            </summary>
            <param name="blockSize">The number samples per cycle.</param>
            <remarks>The implementation uses the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> interface. Override to change behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.MainsChanged(System.Boolean)">
            <summary>
            Called by the host when the users has turned the plugin on or off.
            </summary>
            <param name="onoff">True when on, False when off.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorGetRect(System.Drawing.Rectangle@)">
            <summary>
            Called by the host to retrieve the bounding rectangle of the editor.
            </summary>
            <param name="rect">The rectangle receiving the bounds.</param>
            <returns>Returns true when the <paramref name="rect"/> was set. 
            Returns false when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/> interface.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorOpen(System.IntPtr)">
            <summary>
            Called by the host to open the plugin custom editor.
            </summary>
            <param name="hWnd">The handle to the parent window.</param>
            <returns>Returns false when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/> interface.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorClose">
            <summary>
            Called by the host to close (and destroy) the plugin custom editor.
            </summary>
            <remarks>The implementation uses the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginEditor"/> interface.
            Override to change this behavior.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.EditorIdle">
            <summary>
            Called by the host when the editor is idle.
            </summary>
            <remarks>Keep your processing short.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetChunk(System.Boolean)">
            <summary>
            Called by the host to retrieve a buffer with Program (and Parameter) content.
            </summary>
            <param name="isPreset">True if only the current/active program should be serialized, 
            otherwise (false) the complete program bank should be serialized.</param>
            <returns>Returns null when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence"/> 
            and/or <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> interfaces.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetChunk(System.Byte[],System.Boolean)">
            <summary>
            Called by the host to load in a previously serialized program buffer.
            </summary>
            <param name="data">The buffer provided by the host that contains the program data.</param>
            <param name="isPreset">True if only the current/active program should be deserialized, 
            otherwise (false) the complete program bank should be deserialized.</param>
            <returns>Returns the number of bytes read from the <paramref name="data"/> buffer or 
            zero if the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence"/> 
            and/or <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/> interfaces.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.ProcessReplacing(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            Called by the host once every cycle to process incoming audio as well as output audio.
            </summary>
            <param name="inputs">An array with audio input buffers.</param>
            <param name="outputs">An array with audio output buffers.</param>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> interface.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.ProcessReplacing(Jacobi.Vst.Core.VstAudioPrecisionBuffer[],Jacobi.Vst.Core.VstAudioPrecisionBuffer[])">
            <summary>
            Called by the host once every cycle to process incoming audio as well as output audio.
            </summary>
            <param name="inputs">An array with audio input buffers.</param>
            <param name="outputs">An array with audio output buffers.</param>
            <remarks>The implementation calls the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioPrecisionProcessor"/> interface.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.SetParameter(System.Int32,System.Single)">
            <summary>
            Called by the host to assign a new <paramref name="value"/> to the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-base index into the parameters collection.</param>
            <param name="value">The new value for the parameter.</param>
            <remarks>
            The method will silently fail to change the parameter value if the current Program is read-only.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.GetParameter(System.Int32)">
            <summary>
            Called by the host to retrieve the current value of the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-base index into the parameters collection.</param>
            <returns>Returns 0.0 when the plugin does not implement the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> interface.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CreatePluginInstance">
            <summary>
            Derived class must override and create the plugin instance.
            </summary>
            <returns>Returning null will abort loading the plugin.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginCommandStub.CreatePluginInfo(Jacobi.Vst.Plugin.Framework.IVstPlugin)">
            <summary>
            Creates summary info based on the <paramref name="plugin"/>.
            </summary>
            <param name="plugin">Must not be null.</param>
            <returns>Never returns null.</returns>
            <remarks>Override to add or change behavior.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub">
            <summary>
            Implements the Plugin command stub containing the deprecated methods.
            </summary>
            <remarks>Derive your public plugin command stub class from this class if you need to support older VST versions.
            Most methods are not implemented. You should override and implement the specific methods you need to support.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetProgramCategoriesCount">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns zero.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.CopyCurrentProgramTo(System.Int32)">
            <summary>
            Copies the parameter values of the current <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/> to the program indicated by <paramref name="programIndex"/>.
            </summary>
            <param name="programIndex">A zero-based index into the program collection.</param>
            <returns>Returns true when the program parameter values were successfully copied.</returns>
            <remarks>The name of the program itself is also copied.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.ConnectInput(System.Int32,System.Boolean)">
            <summary>
            Not implemented.
            </summary>
            <param name="inputIndex">Not used.</param>
            <param name="connected">Not used.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.ConnectOutput(System.Int32,System.Boolean)">
            <summary>
            Not implemented.
            </summary>
            <param name="outputIndex">Not used.</param>
            <param name="connected">Not used.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetCurrentPosition">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns zero.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetDestinationBuffer">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.SetBlockSizeAndSampleRate(System.Int32,System.Single)">
            <summary>
            Assigns the <paramref name="blockSize"/> and <paramref name="sampleRate"/> to the audio processor.
            </summary>
            <param name="blockSize">The number of samples to be expected in each audio processing cycle.</param>
            <param name="sampleRate">The nuumber of samples per second.</param>
            <returns>Returns true when the information was assigned to the audio processor. 
            When the plugin does not implement the audio processor, false is returned.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetErrorText">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.Idle">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetIcon">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.SetViewPosition(System.Drawing.Point@)">
            <summary>
            Not implemented.
            </summary>
            <param name="position">Not used.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.KeysRequired">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.GetVu">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns 0.0.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.EditorKey(System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="keycode">Not used.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.EditorTop">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.EditorSleep">
            <summary>
            Not implemented.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.Identify">
            <summary>
            Identifies with 'NvEf'.
            </summary>
            <returns>Always returns the integer value for 'NvEf'.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.StdPluginDeprecatedCommandStub.ProcessAcc(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            Not implemented.
            </summary>
            <param name="inputs">Not used.</param>
            <param name="outputs">Not used.</param>
            <remarks>Method does nothing.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin">
            <summary>
            Provides a base class for the plugin root class.
            </summary>
            <remarks>Derive your plugin root class from this base class to gain a 
            default implementation of the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPlugin"/> interface.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.#ctor(System.String,Jacobi.Vst.Plugin.Framework.VstProductInfo,Jacobi.Vst.Core.VstPluginCategory,Jacobi.Vst.Plugin.Framework.VstPluginCapabilities,System.Int32,System.Int32)">
            <summary>
            To be called from the default constructor of the derived plugin class
            to initialize the base class.
            </summary>
            <param name="name">The name of the plugin. Must not be null. <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Name"/></param>
            <param name="productInfo">The product information of the plugin. Must not be null. <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.ProductInfo"/></param>
            <param name="category">The plugin category. <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Category"/></param>
            <param name="capabilities">The plugin capabilities <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Capabilities"/>.</param>
            <param name="initialDelay">The initial delay of the plugin. <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.InitialDelay"/></param>
            <param name="pluginID">The unique Id of the plugin. <seealso cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.PluginID"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="productInfo"/> or <paramref name="name"/> is not set to an instance of an object.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name"/> is an empty string.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.ProductInfo">
            <summary>
            Retrieves product information for the plugin (instance).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Category">
            <summary>
            Gets the category of the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Capabilities">
            <summary>
            Gets the additional capabilities of the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.InitialDelay">
            <summary>
            Gets the initial delay (in samples)
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.PluginID">
            <summary>
            Gets the unique identifier of the plugin represented as a 4 character code.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Host">
            <summary>
            Gets the reference to the Host root object.
            </summary>
            <remarks>This member can be null. It is set after a call to <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Open(Jacobi.Vst.Plugin.Framework.IVstHost)"/>.</remarks>
        </member>
        <member name="E:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Opened">
            <summary>
            Triggered when the <see cref="M:Open"/> method is called.
            </summary>
            <remarks>At this point the <see cref="P:Host"/> property is available.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Open(Jacobi.Vst.Plugin.Framework.IVstHost)">
            <summary>
            The host will call this method when the plugin is loaded and should open its resources.
            </summary>
            <param name="host">A reference to the Host root interface. This reference can be used to 
            query for other host interfaces.Must not be null.</param>
            <remarks>Open is a good time to allocate large memory blocks when you use a pre-allocated 
            memory schema in your plugin.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Suspend">
            <summary>
            Called by the host when the user has turned off your plugin.
            </summary>
            <remarks>Your plugin is NOT being unloaded by the host. The user just turned it off.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Resume">
            <summary>
            Called by the host when the user has turned on your plugin.
            </summary>
            <remarks>Your plugin can receive multiple <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Suspend"/>/Resume calls during its lifetime.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Supports``1">
            <summary>
            Indicates if the interface <typeparamref name="T"/> is supported by the object.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns true if the interface <typeparamref name="T"/> is supported.</returns>
            <remarks>The implementation check <b>this</b> instance for the specified Type.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.GetInstance``1">
            <summary>
            Retrieves a reference to an implementation of the interface <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns null when the <typeparamref name="T"/> is not supported.</returns>
            <remarks>The implementation check <b>this</b> instance for the specified Type.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Dispose">
            <summary>
            Called by the framework to cleanup the plugin resources.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPlugin.Dispose(System.Boolean)">
            <summary>
            Called when the instance is destructed. Override to call <see cref="M:System.IDisposable.Dispose"/> on class members.
            </summary>
            <param name="disposing">If false only dispose unmanaged resourcses, otherwise also dispose managed resources.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioPrecisionProcessorBase">
            <summary>
            The VstPluginAudioPrecisionProcessorBase implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioPrecisionProcessor"/> 
            interface and provides a basis for the Plugin implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioPrecisionProcessorBase.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioPrecisionProcessorBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioPrecisionProcessorBase.Process(Jacobi.Vst.Core.VstAudioPrecisionBuffer[],Jacobi.Vst.Core.VstAudioPrecisionBuffer[])">
            <inheritdoc />
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase">
            <summary>
            The VstPluginAudioProcessorBase implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginAudioProcessor"/> 
            interface and provides a basis for the Plugin implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.#ctor">
            <summary>
            A default ctor for derived classes.
            </summary>
            <remarks>When using this constructor you have to set the 
            <see cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.InputCount"/>, <see cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.OutputCount"/> and <see cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.TailSize"/>
            properties or they will be zero.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialization ctor for derived classes.
            </summary>
            <param name="inputCount">The number of audio input channels.</param>
            <param name="outputCount">The number of audio output channels.</param>
            <param name="tailSize">The number of samples the Audio Processor will produce
            after input has stopped. Typically used in reverbs, echos and delays.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.InputCount">
            <inheritdoc />
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.OutputCount">
            <inheritdoc />
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.TailSize">
            <inheritdoc />
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.SampleRate">
            <inheritdoc />
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.BlockSize">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.Process(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginAudioProcessorBase.SetPanLaw(Jacobi.Vst.Core.VstPanLaw,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginContext">
            <summary>
            Contains all root references in context of a plugin.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginContext.PluginInfo">
            <summary>Reference to the plugin information.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginContext.Plugin">
            <summary>Reference to the plugin root object.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginContext.Host">
            <summary>Reference to Host Proxy.</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginContext.Dispose">
            <summary>
            Disposes all members, cascades the Dispose call.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase">
            <summary>
            The VstPluginPersistenceBase class implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPersistence"/>\
            interface for custom persistence.
            </summary>
            <remarks>
            This class must be derived and the abstract <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.CreateProgramReader(System.IO.Stream)"/> method
            must be implemented.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.#ctor">
            <summary>
            Initializes a new instance, assuming ASCII encoding for text.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.Encoding">
            <summary>
            Gets or sets the encoding that is used for text.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.ReadPrograms(System.IO.Stream,Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.WritePrograms(System.IO.Stream,Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.CanLoadChunk(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginPersistenceBase.CreateProgramReader(System.IO.Stream)">
            <summary>
            Creates a reader for reading the <paramref name="input"/> stream.
            </summary>
            <param name="input">Contains the stream that was written by plugin. Must not be null.</param>
            <returns>Returns a new reader. Never returns null.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase">
            <summary>
            The VstPluginProgramsBase class implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginPrograms"/>
            interface and provides a basis for implementing Programs in a plugin.
            </summary>
            <remarks>
            The class must be derived and the abstract <see cref="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.CreateProgramCollection"/>
            method must be implemented.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.Programs">
            <inheritdoc />
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.ActiveProgram">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.BeginSetProgram">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.EndSetProgram">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.CreateProgramCollection">
            <summary>
            Called on first access on the <see cref="P:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginProgramsBase.Programs"/> property and returns
            a completely filled collection of Programs.
            </summary>
            <returns>Never returns null.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginWithServices">
            <summary>
            Provides a Plugin base class that uses DI for registering plugin object interfaces.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginWithServices.#ctor(System.String,Jacobi.Vst.Plugin.Framework.VstProductInfo,Jacobi.Vst.Core.VstPluginCategory,Jacobi.Vst.Plugin.Framework.VstPluginCapabilities,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginWithServices.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Override to register the plugin interfaces and the class/types that implement them.
            </summary>
            <param name="services">Will never be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginWithServices.Supports``1">
            <summary>
            Indicates if the interface <typeparamref name="T"/> is supported by the object.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns true if the interface <typeparamref name="T"/> is supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.Plugin.VstPluginWithServices.GetInstance``1">
            <summary>
            Retrieves a reference to an implementation of the interface <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>Returns null when the <typeparamref name="T"/> is not supported.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.ExtensibleInterfaceRef_InstanceAlreadySet">
            <summary>
              Looks up a localized string similar to The property is already set to an instance of an object. Reset to null before assigning a new object instance..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.FileSelectorScope_OpenNotSupported">
            <summary>
              Looks up a localized string similar to The Host does not implement OpenFileSelector..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.StdPluginCommandStub_HostNotInitialized">
            <summary>
              Looks up a localized string similar to The HostCommandStub has not been initialized..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.StdPluginCommandStub_StringTooLong">
            <summary>
              Looks up a localized string similar to The Plugin returned a {0} &apos;{1}&apos; that is too long. Maximum length is {2} characters..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.VstEventCollection_CollectionReadOnly">
            <summary>
              Looks up a localized string similar to The VstEventCollection is read-only..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.VstParameterInfo_ParameterManagerNotLinked">
            <summary>
              Looks up a localized string similar to Assigned VstParameterManager value is not linked to this VstParamaterInfo instance..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.VstParameterNormalizationInfo_AlreadyAttached">
            <summary>
              Looks up a localized string similar to The specified VstParameterInfo instance already has a VstParameterNormalizationInfo instance attached..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.Properties.Resources.VstParameterNormalizationInfo_ParameterInfoInvalid">
            <summary>
              Looks up a localized string similar to The specified VstParameterInfo does not have a valid value range set..
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstConnectionInfo">
            <summary>
            The VstConnectionInfo class represents information about a plugin connection pin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstConnectionInfo.Label">
            <summary>
            Gets or sets the label for this connection pin.
            </summary>
            <remarks>The label cannot be more than 64 characters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstConnectionInfo.ShortLabel">
            <summary>
            Gets or sets the short label for the connection pin.
            </summary>
            <remarks>The short label cannot exceed 8 characters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstConnectionInfo.SpeakerArrangementType">
            <summary>
            Gets or sets the speaker arrangement type.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstConnectionInfoCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstConnectionInfo"/> instances.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstEventCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Core.VstEvent"/> instances.
            </summary>
            <remarks>The collection can be read-only or writable.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstEventCollection.#ctor">
            <summary>
            Constructs a read/write collection
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstEventCollection.#ctor(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            Constructs a readonly collection.
            </summary>
            <param name="events">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstEventCollection.AddRange(System.Collections.Generic.IEnumerable{Jacobi.Vst.Core.VstEvent})">
            <summary>
            Adds a range of <see cref="T:Jacobi.Vst.Core.VstEvent"/> instance.
            </summary>
            <param name="events">Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="events"/> 
            is not set to an instance of an object.</exception>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstEventCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overriden to check for IsReadOnly
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstEventCollection.IsReadOnly">
            <summary>
            Gets a value indicating wheter the collection is read-only.
            </summary>
            <remarks>All methods that modify the collection will throw an 
            <see cref="T:System.InvalidOperationException"/> when the collection is read-only.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstEventCollection.ThrowIfReadOnly">
            <summary>
            Helper method to throw an exception when the collection is read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the collection is read-only.</exception>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstHostCapabilities">
            <summary>
            Flags that indicate Host capabilities.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.None">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.SendMidiEvents">
            <summary>The host is capable of sending Midi events to the plugin.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.ReceiveMidiEvents">
            <summary>The host is capable of receiving Midi events from the plugin.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.RealtimeMidiFlag">
            <summary>The host supports routing real-time Midi events to the plugin.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.ReportConnectionChanges">
            <summary>The host reports connection changes (bus assignments) to the plugin.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.AcceptIoChanges">
            <summary>The host supports <see cref="M:Jacobi.Vst.Plugin.Framework.IVstHostSequencer.UpdatePluginIO"/>.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.SizeWindow">
            <summary>The host supports sizing its window.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.Offline">
            <summary>The host supports offline processing.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.OpenFileSelector">
            <summary>The host supports the <see cref="M:Jacobi.Vst.Plugin.Framework.IVstHostShell.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)"/> method.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.StartStopProcess">
            <summary>The host supports calling the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginProcess"/> interface.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.PluginHost">
            <summary>The host is capable of working with plugins that host other plugins.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstHostCapabilities.SendTimeInfo">
            <summary>TODO:</summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiCategory">
            <summary>
            The VstMidiCategory is used by a plugin to define Midi Program Category hierarchies.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiCategory.Name">
            <summary>
            Gets or sets the category name.
            </summary>
            <remarks>The Name cannot exceed 64 characters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiCategory.ParentCategory">
            <summary>
            Gets or sets the parent category.
            </summary>
            <remarks>When this Property is null, the instance represents a root category.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiCategoryCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiCategory"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiCategoryCollection.GetKeyForItem(Jacobi.Vst.Plugin.Framework.VstMidiCategory)">
            <summary>
            Returns a unique key for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The item in the collection a key is needed for.</param>
            <returns>Returns the <see cref="P:Jacobi.Vst.Plugin.Framework.VstMidiCategory.Name"/> property.</returns>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo">
            <summary>
            The VstMidiChannelInfo contains Midi Program information for a Midi channel.
            </summary>
            <remarks>Although an instance of the VstMidiChannelInfo class represents Midi Program information
            for one Midi channel, it has no member to identify that Midi channel. This is to allow easy reuse
            of one VstMidiChannelInfo instance for multiple channels.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo.Categories">
            <summary>
            Gets the collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiCategory"/>s.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo.Programs">
            <summary>
            Gets a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiProgram"/>s.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo.ActiveProgram">
            <summary>
            Gets or sets the active/current Midi Program for this channel.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo.HasChanged">
            <summary>
            Indicates anything in the Midi Programs and Categories has changed.
            </summary>
            <remarks>The framework will automatically reset this property (false)
            when the host has inquired if the names have changed.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfoCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiChannelInfo"/> instances.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiProgram">
            <summary>
            Contains information about a Midi Program.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.Name">
            <summary>
            Gets or sets the name of the Midi program.
            </summary>
            <remarks>The Name cannot exceed 64 characters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.ProgramChange">
            <summary>
            Gets or sets the Midi Program Change message value.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.BankSelectMsb">
            <summary>
            Gets or sets the Most Significant Byte (Hi) value of the Midi Bank Select message.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.BankSelectLsb">
            <summary>
            Gets or sets the Least Significant Byte (Lo) value of the Midi Bank Select message.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.Category">
            <summary>
            Gets or sets the <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiCategory"/> instance this Midi program is part of.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgram.GetKeyName(System.Int32)">
            <summary>
            Retrieves the name of the specified <paramref name="keyNumber"/>.
            </summary>
            <param name="keyNumber">The Midi key number (note number).</param>
            <returns>Returns a string containing the note (C,C#,D -- A,A#,B) and an ocatve number starting at -2.</returns>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.IsActive">
            <summary>
            Gets or sets an indication if this instance is currently the active MidiProgram.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiProgram"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.GetKeyForItem(Jacobi.Vst.Plugin.Framework.VstMidiProgram)">
            <summary>
            Returns a unique key for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The item in the collection a key is needed for.</param>
            <returns>Returns the <see cref="P:Jacobi.Vst.Plugin.Framework.VstMidiProgram.Name"/> property.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.ClearItems">
            <summary>
            Called to clear all the items from the collection.
            </summary>
            <remarks>The implementation removes all event handlers from the instances.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.InsertItem(System.Int32,Jacobi.Vst.Plugin.Framework.VstMidiProgram)">
            <summary>
            Called to insert a new instance into the collection.
            </summary>
            <param name="index">Zero-based position into the collection.</param>
            <param name="item">The item to insert.</param>
            <remarks>The implementation adds an event handler to the <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged"/> event.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.SetItem(System.Int32,Jacobi.Vst.Plugin.Framework.VstMidiProgram)">
            <summary>
            Called to set a new item on an exisint position in the collection.
            </summary>
            <param name="index">Zero-based position into the collection.</param>
            <param name="item">The item to set.</param>
            <remarks>The implementation adds an event handler to the <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged"/> 
            event and remove the event handler from the old item that is replaced.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.RemoveItem(System.Int32)">
            <summary>
            Called when to remove an item from the collection.
            </summary>
            <param name="index">Zero-based position into the collection.</param>
            <remarks>The implementation removes the event handler from the item that is removed.</remarks>
        </member>
        <member name="E:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.MidiProgramNameChanged">
            <summary>
            Event is raised when a <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged"/> event is raised.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.OnMidiProgramNameChanged(System.Object)">
            <summary>
            Raises the <see cref="E:Jacobi.Vst.Plugin.Framework.VstMidiProgramCollection.MidiProgramNameChanged"/> event when a
            <see cref="E:Jacobi.Vst.Plugin.Framework.Common.ObservableObject.PropertyChanged"/> event is fired.
            </summary>
            <param name="sender">The original <see cref="T:Jacobi.Vst.Plugin.Framework.VstMidiProgram"/> that fired the event.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameter">
            <summary>
            The VstParameter represents a parameter value for one plugin parameter.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameter.#ctor(Jacobi.Vst.Plugin.Framework.VstParameterInfo)">
            <summary>
            Constructs a new instance based on the parameter meta info.
            </summary>
            <param name="parameterInfo">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.Info">
            <summary>
            Gets the parameter meta info passed in at the constructor.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.Parent">
            <summary>
            Gets or set a reference to the (first) collection this parameter is in.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.Index">
            <summary>
            Gets the zero-based index this parameter has in the parameter collection.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.Value">
            <summary>
            Gets or sets the numberical value of the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.NormalizedValue">
            <summary>
            Gets or sets the normalized value of the parameter [0.0, 1.0].
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.DisplayValue">
            <summary>
            Gets the value of the parameter formatted for displaying.
            </summary>
            <remarks>Derived classes can set this property but the length should not exceed 8 characters. 
            By default the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameter.Value"/> property is returned as string (untill you set a non-null value).</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameter.ParseValue(System.String)">
            <summary>
            Called when the parameter value is parsed from a string.
            </summary>
            <param name="value">The string containing the parameter value.</param>
            <returns>Returns true when the <paramref name="value"/> was successfully parsed.</returns>
            <remarks>The default implementation will try to parse to a <see cref="T:System.Single"/> value.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameter.IsActive">
            <summary>
            Gets the active state for this parameter.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameter.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameter.Dispose(System.Boolean)">
            <summary>
            Override this method in derived classes to cleanup managed and/or
            unmanaged resources.
            </summary>
            <param name="disposing">When true dispose managed and unmanaged resources. 
            when false dispose only unmanaged resources.</param>
            <remarks>All references are cleared (null), also the callback handlers.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterCategory">
            <summary>
            Names a parameter category.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterCategory.Name">
            <summary>
            Gets or sets the name of the parameter category.
            </summary>
            <remarks>The Name cannot exceed 24 characters.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterCategoryCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterCategory"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCategoryCollection.GetKeyForItem(Jacobi.Vst.Plugin.Framework.VstParameterCategory)">
            <summary>
            Returns a unique key for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The item in the collection a key is needed for.</param>
            <returns>Returns the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterCategory.Name"/> property.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCategoryCollection.AddRange(Jacobi.Vst.Plugin.Framework.VstParameterCategoryCollection)">
            <summary>
            Adds all instances in the <paramref name="categories"/> collection to this instance.
            </summary>
            <param name="categories">Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.AddRange(System.Collections.Generic.IEnumerable{Jacobi.Vst.Plugin.Framework.VstParameter})">
            <summary>
            Adds a range of <paramref name="parameters"/> to the collection.
            </summary>
            <param name="parameters">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.FindParametersIn(Jacobi.Vst.Plugin.Framework.VstParameterCategory)">
            <summary>
            Returns a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> instances that all belong
            to the specified <paramref name="category"/>.
            </summary>
            <param name="category">The parameter category. Can be null.</param>
            <returns>An empty collection is returned when no parameters could be found that
            fall under the specified <paramref name="category"/>. Never returns null.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.GetKeyForItem(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Returns a unique key for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The item in the collection a key is needed for.</param>
            <returns>Returns the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.Name"/> property.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.ClearItems">
            <summary>
            Override to <see cref="M:Jacobi.Vst.Plugin.Framework.VstParameter.Dispose"/> the collection items.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.RemoveItem(System.Int32)">
            <summary>
            Override to <see cref="M:Jacobi.Vst.Plugin.Framework.VstParameter.Dispose"/> the collection item.
            </summary>
            <param name="index">A zero-based index that will be removed.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.SetItem(System.Int32,Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Override to <see cref="M:Jacobi.Vst.Plugin.Framework.VstParameter.Dispose"/> the collection item.
            </summary>
            <param name="index">A zero-based index the new <paramref name="item"/> will be set.</param>
            <param name="item">The new item to set. Can be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterCollection.InsertItem(System.Int32,Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Override to set the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameter.Index"/> property.
            </summary>
            <param name="index">zero based index into the collection.</param>
            <param name="item">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterCollection.IsActive">
            <summary>
            Gets the parameter collection status.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterInfo">
            <summary>
            The VstParameterInfo contains the meta information for a parameter.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterInfo.#ctor">
            <summary>
            Constructs a new instance and sets the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.MaxInteger"/> property to 1.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.NormalizationInfo">
            <summary>
            When set to an instance of an object it contains 
            the normalization factors for this parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.ParameterManager">
            <summary>
            Gets or sets the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterManager"/> for this parameter type.
            </summary>
            <remarks>The <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.ParameterInfo"/> property must be assigned to <b>this</b> instance, 
            otherwise an <see cref="T:System.ArgumentException"/> is thrown.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterManager"/> instance that is set, 
            does not managed <b>this</b> parameter.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.Category">
            <summary>
            Gets or sets the parameter category.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.DefaultValue">
            <summary>
            Gets or sets the default value the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> is initialized with.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.NullValue">
            <summary>
            Gets or sets the null value used when the <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterManager"/> switches active parameters.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.CanBeAutomated">
            <summary>
            Gets or sets an indication wheter the parameter can be automated by the host (true).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.IsSwitch">
            <summary>
            Gets or sets an indication wheter the parameter is a switch (true).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.CanRamp">
            <summary>
            Gets or sets an indication wheter the parameter can ramp (true).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <remarks>The Name cannot exceed 7 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 8 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.Label">
            <summary>
            Gets or sets the label of the parameter.
            </summary>
            <remarks>The Label cannot exceed 64 characters</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.ShortLabel">
            <summary>
            Gets or sets the short label of the parameter.
            </summary>
            <remarks>The ShortLabel cannot exceed 8 characters</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 8 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.IsMinMaxIntegerValid">
            <summary>
            Gets an indication whether the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.MinInteger"/> and 
            <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.MaxInteger"/> properties are filled.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.MinInteger">
            <summary>
            Gets or sets the minimal value of the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.MaxInteger">
            <summary>
            Gets or sets the maximal value of the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.IsStepIntegerValid">
            <summary>
            Gets an indication whether the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.StepInteger"/> and 
            <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.LargeStepInteger"/> properties are filled.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.StepInteger">
            <summary>
            Gets or sets the steps the parameter value will take.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.LargeStepInteger">
            <summary>
            Gets or sets the large steps the parameter value will take.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.IsStepFloatValid">
            <summary>
            Gets an indication whether the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.StepFloat"/>, <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.SmallStepFloat"/> 
            and <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.LargeStepFloat"/> properties are set.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.StepFloat">
            <summary>
            Gets or sets the steps the parameter value will take.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.SmallStepFloat">
            <summary>
            Gets or sets the small steps the parameter value will take.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.LargeStepFloat">
            <summary>
            Gets or sets the large steps the parameter value will take.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterInfoCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterInfo"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterInfoCollection.AddRange(System.Collections.Generic.IEnumerable{Jacobi.Vst.Plugin.Framework.VstParameterInfo})">
            <summary>
            Adds a range of <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameterInfo"/> instances to the collection.
            </summary>
            <param name="enumerator">Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterManager">
            <summary>
            catches parameter changes and communicates these back to the source component
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterManager.#ctor(Jacobi.Vst.Plugin.Framework.VstParameterInfo)">
            <summary>
            Constructs a new instance based on the parameter type information.
            </summary>
            <param name="parameterInfo">Must not be null.</param>
            <remarks>The <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterInfo.ParameterManager"/> property is set to <b>this</b> instance.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.HostAutomation">
            <summary>
            When <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.HostAutomation"/> is non-null it is used to notify the host of parameter value changes.
            </summary>
            <remarks>
            Set this property when the Opened event is triggered on the plugin root base class(es).
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.ParameterInfo">
            <summary>
            Gets the meta data for the parameter this instance manages.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.ActiveParameter">
            <summary>
            Get the current active parameter instance.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.CurrentValue">
            <summary>
            Gets the current parameter value.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.PreviousValue">
            <summary>
            Gets the previous parameter value.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterManager.SubscribeTo(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Subscribes to the events of the <paramref name="parameter"/>.
            </summary>
            <param name="parameter">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterManager.ChangeValue(System.Single)">
            <summary>
            Changes the <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.CurrentValue"/> and <see cref="P:Jacobi.Vst.Plugin.Framework.VstParameterManager.PreviousValue"/> properties.
            </summary>
            <param name="newValue">The new value of the parameter.</param>
            <remarks>
            If you wish to implement parameter value smoothing 
            (where changes in value are smoothed out over time),
            this is the place to call the smoothing logic.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterManager.HandleParameterValueChanged(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Called when any parameter managed by this instance has changed value.
            </summary>
            <param name="parameter">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterManager.HandleParameterActivityChanged(Jacobi.Vst.Plugin.Framework.VstParameter)">
            <summary>
            Called when any parameter managed by this instance has changed the <see cref="P:Jacobi.Vst.Plugin.Framework.IActivatable.IsActive"/> property.
            </summary>
            <param name="parameter">Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo">
            <summary>
            The VstParameterNormalizationInfo class contains a factor to be 
            applied to a parameter value to move it into the [0, 1] range.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo.ScaleFactor">
            <summary>
            A factor to limit the reach of the parameter value to 0-1.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo.NullOffset">
            <summary>
            An offset that moves the null (zero) value of the parameter to 0 (zero).
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo.GetNormalizedValue(System.Single)">
            <summary>
            Converts the raw parameter value to a normalized value.
            </summary>
            <param name="rawValue">The raw parameter value.</param>
            <returns>Returns the normalized parameter value that ranges from 0.0 to 1.0.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo.GetRawValue(System.Single)">
            <summary>
            Converts the normalized value to a raw parameter value.
            </summary>
            <param name="normalizedValue">The normalized value ranging from 0.0 to 1.0</param>
            <returns>Returns the raw parameter value.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstParameterNormalizationInfo.AttachTo(Jacobi.Vst.Plugin.Framework.VstParameterInfo)">
            <summary>
            Attaches the normalization info to the <paramref name="paramInfo"/>.
            </summary>
            <param name="paramInfo">Must not be null.</param>
            <remarks>Making this call enables the Framework to transparently normalize the parameter value, 
            untill the host retrieves the parameter properties (info).
            Not making this call will always provide the host with the raw parameter value.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstPluginCapabilities">
            <summary>
            Flags that discribe plugin capabilities that could not be defined as interfaces.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstPluginCapabilities.None">
            <summary>The plugin has no extra capabilities to report to the host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstPluginCapabilities.NoSoundInStop">
            <summary>The plugin will not produce any sound when audio input is silence.</summary>
        </member>
        <member name="F:Jacobi.Vst.Plugin.Framework.VstPluginCapabilities.ReceiveTimeInfo">
            <summary>Indicates to the host that the plugin will request Time Information.</summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstProductInfo">
            <summary>
            Contains the product and vendor information.
            </summary>
            <remarks>This class is used for the host as well as for the plugin.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProductInfo.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructs a new instance based on the <paramref name="product"/>, 
            <paramref name="vendor"/> and <paramref name="version"/> information.
            </summary>
            <param name="product">Must not exceed 64 characters.</param>
            <param name="vendor">Must not exceed 64 characters.</param>
            <param name="version">A version number in the thousends. For example 1100 means version 1.1.0.0.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="product"/> or <paramref name="vendor"/> are not set to an instance of an object.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="product"/> or <paramref name="vendor"/> are empty or exceed their length of 63 characters.</exception>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProductInfo.FormatVersion(System.Int32)">
            <summary>
            Formats the <paramref name="version"/> to a display string.
            </summary>
            <param name="version">The version to format.</param>
            <returns>Never returns null.</returns>
            <remarks>The <paramref name="version"/> is first divided by 1000, 
            then by 100, then by 10 to build the display string.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Product">
            <summary>
            Gets the product string.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Vendor">
            <summary>
            Gets the vendor description.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.FormattedVersion">
            <summary>
            Gets the <see cref="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Version"/> formatted for displaying in the UI.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.IsValid">
            <summary>
            Indicates if <see cref="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Product"/>, <see cref="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Vendor"/> 
            and <see cref="P:Jacobi.Vst.Plugin.Framework.VstProductInfo.Version"/> are filled out.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstProgram">
            <summary>
            The VstProgram class represents one plugin program.
            </summary>
            <remarks>A plugin program contains all plugin parameter but with different values than other programs.
            For this reason the VstProgram implements the <see cref="T:Jacobi.Vst.Plugin.Framework.IVstPluginParameters"/> interface.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgram.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>The <see cref="P:Jacobi.Vst.Plugin.Framework.VstProgram.Categories"/> are automatically filled as <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> instances
            are added to the <see cref="P:Jacobi.Vst.Plugin.Framework.VstProgram.Parameters"/> collection.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgram.#ctor(Jacobi.Vst.Plugin.Framework.VstParameterCategoryCollection)">
            <summary>
            Constructs a new instance based on a collection of parameter <paramref name="categories"/>.
            </summary>
            <param name="categories">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProgram.IsReadOnly">
            <summary>
            True if the program is a readonly factory preset.
            </summary>
            <remarks>
            Read-only programs do not allow their parameters to change value.
            </remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProgram.Name">
            <summary>
            Gets or sets the name of the plugin program.
            </summary>
            <remarks>The Name must not exceed 24 characters.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProgram.Categories">
            <summary>
            Gets a collection of parameter categories that were pass in the constructor.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProgram.Parameters">
            <summary>
            Gets a collection of parameter instances that defines the program.
            </summary>
            <remarks>The program does nothing to fill the collection. 
            The plugin logic should fill the parameters.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgram.Dispose">
            <summary>
            Disposes a plugin program.
            </summary>
            <remarks>Also disposes all <see cref="T:Jacobi.Vst.Plugin.Framework.VstParameter"/> instances in the <see cref="P:Jacobi.Vst.Plugin.Framework.VstProgram.Parameters"/> collection.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgram.Dispose(System.Boolean)">
            <summary>
            Called when the instance is destructed. Override to call <see cref="M:System.IDisposable.Dispose"/> on class members.
            </summary>
            <param name="disposing">If false only dispose unmanaged resourcses, otherwise also dispose managed resources.</param>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Framework.VstProgram.IsActive">
            <summary>
            Gets or sets an indication if the program is active (true).
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Framework.VstProgramCollection">
            <summary>
            Manages a collection of <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/> instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgramCollection.AddRange(Jacobi.Vst.Plugin.Framework.VstProgramCollection)">
            <summary>
            Adds a range of <see cref="T:Jacobi.Vst.Plugin.Framework.VstProgram"/> instances to the collection.
            </summary>
            <param name="programs">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgramCollection.ClearItems">
            <summary>
            Overridden to <see cref="M:System.IDisposable.Dispose"/> the instances.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgramCollection.RemoveItem(System.Int32)">
            <summary>
            Overridden to <see cref="M:System.IDisposable.Dispose"/> the removed instance.
            </summary>
            <param name="index">A zero-based index that will be removed.</param>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Framework.VstProgramCollection.SetItem(System.Int32,Jacobi.Vst.Plugin.Framework.VstProgram)">
            <summary>
            Overridden to <see cref="M:System.IDisposable.Dispose"/> the replaced instance.
            </summary>
            <param name="index">A zero-based index the new <paramref name="item"/> will be set.</param>
            <param name="item">The new item to set. Can be null.</param>
        </member>
    </members>
</doc>
