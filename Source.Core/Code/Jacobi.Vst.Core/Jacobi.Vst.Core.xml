<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jacobi.Vst.Core</name>
    </assembly>
    <members>
        <member name="T:Jacobi.Vst.Core.Constants">
            <summary>
            Constants used in the VST interface
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxProgramNameLength">
            <summary>used for #effGetProgramName; #effSetProgramName; #effGetProgramNameIndexed</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxParameterStringLength">
            <summary>used for #effGetParamLabel; #effGetParamDisplay; #effGetParamName</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxVendorStringLength">
            <summary>used for #effGetVendorString; #audioMasterGetVendorString</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxProductStringLength">
            <summary>used for #effGetProductString; #audioMasterGetProductString</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxEffectNameLength">
            <summary>used for #effGetEffectName</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxMidiNameLength">
            <summary>used for #MidiProgramName; #MidiProgramCategory; #MidiKeyName; #VstSpeakerProperties; #VstPinProperties</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxLabelLength">
            <summary>used for #VstParameterProperties->label; #VstPinProperties->label</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxShortLabelLength">
            <summary>used for #VstParameterProperties->shortLabel; #VstPinProperties->shortLabel</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxCategoryLabelLength">
            <summary>used for #VstParameterProperties->label</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxFileNameLength">
            <summary>used for #VstAudioFile->name</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxFileSelectorTitle">
            <summary>used for #VstFileSelect->title</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxFileTypeName">
            <summary>used for #VstFileType->name and mimeType(2)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxFileTypeExtension">
            <summary>used for #VstFileType->dos/unix/macType</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Constants.MaxCanDoLength">
            <summary>used in both host and plugin cando's.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated10">
            <summary>
            Contains all the operations from VST 1.0 that were deprecated in VST 2.4.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated10.PinConnected(System.Int32,System.Boolean)">
            <summary>
            Reports whether the spefied pin at the <paramref name="connectionIndex"/> is connected.
            </summary>
            <param name="connectionIndex">A zero-based index of the connection pin.</param>
            <param name="output">Report in output pins when True, otherwise (False) report on input pins.</param>
            <returns>Returns True when the pin is connected, otherwise False is returned.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20">
            <summary>
            Contains all the operations from VST 2.0 that were deprecated in VST 2.4.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.WantMidi">
            <summary>
            Indicates to the Host that the Plugin wants to process Midi events.
            </summary>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.SetTime(Jacobi.Vst.Core.VstTimeInfo,Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            Sets a new time for the Host.
            </summary>
            <param name="timeInfo">Must not be null.</param>
            <param name="filterFlags">Unclear what the purpose is for these flags.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetTempoAt(System.Int32)">
            <summary>
            Retrieves the tempo at specified <paramref name="sampleIndex"/> location.
            </summary>
            <param name="sampleIndex">A zero-based sample index.</param>
            <returns>Returns the tempo in bmp * 10000.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetAutomatableParameterCount">
            <summary>
            Returns the number of parameters that support automation.
            </summary>
            <returns>Returns the number of parameters that support automation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetParameterQuantization(System.Int32)">
            <summary>
            Returns the integer value for +1.0 representation,
            or 1 if full single float precision is maintained in automation.
            </summary>
            <param name="parameterIndex">A zero-based index into the parmeter collection or -1 for all/any.</param>
            <returns>Returns the integer value for +1.0 representation, or 1 if full single float precision is maintained in automation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.NeedIdle">
            <summary>
            Indicates to the host that the Plugin needs idle calls (outside its editor window).
            </summary>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetPreviousPlugin(System.Int32)">
            <summary>
            Retrieves the previous Plugin based on the specified <paramref name="pinIndex"/>.
            </summary>
            <param name="pinIndex">A zero-based pin index. Specify -1 for next.</param>
            <returns>Return System.IntPtr.Zero when unsuccessful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetNextPlugin(System.Int32)">
            <summary>
            Retrieves the next Plugin based on the specified <paramref name="pinIndex"/>.
            </summary>
            <param name="pinIndex">A zero-based pin index. Specify -1 for next.</param>
            <returns>Return System.IntPtr.Zero when unsuccessful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.WillReplaceOrAccumulate">
            <summary>
            Returns an indication how the Host processes audio.
            </summary>
            <returns>Returns 0=Not Supported, 1=Replace, 2=Accumulate.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.SetOutputSampleRate(System.Single)">
            <summary>
            For variable IO. Sets the output sample rate.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetOutputSpeakerArrangement">
            <summary>
            Gets the output speaker arrangement.
            </summary>
            <returns>Returns the speaker arrangement.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.SetIcon(System.IntPtr)">
            <summary>
            Provides the host with an icon representation of the plugin.
            </summary>
            <param name="icon">Passes the icon Handle to the Host. Must not be null.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.OpenWindow">
            <summary>
            Opens a new host window.
            </summary>
            <returns>Returns the Win32 HWND window handle.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.CloseWindow(System.IntPtr)">
            <summary>
            Closes a window previously opened by <see cref="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.OpenWindow"/>.
            </summary>
            <param name="wnd">The window handle.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.EditFile(System.String)">
            <summary>
            Opens an audio editor window; defined by <paramref name="xml"/>.
            </summary>
            <param name="xml">Must not be null or empty.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetChunkFile">
            <summary>
            Gets the native path of currently loading bank or project.
            </summary>
            <returns>Return the file path to the chunk file.</returns>
            <remarks>Call from within GetChunk.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20.GetInputSpeakerArrangement">
            <summary>
            Gets the input speaker arrangement.
            </summary>
            <returns>Returns the speaker arrangement.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecatedBase">
            <summary>
            Contains all the operations from VST 1.0 that were deprecated in VST 2.4.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecatedBase.ProcessAcc(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            Processes audio in an accumulating fashion.
            </summary>
            <param name="inputs">Audio input buffers. Must not be null.</param>
            <param name="outputs">Audio output buffers. Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10">
            <summary>
            Contains all the operations from VST 1.0 that were deprecated in VST 2.4.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10.GetVu">
            <summary>
            Called if the VstPluginDeprecatedInfo.DeprecatedFlags has the "HasClip" or "HasVu" flags set.
            </summary>
            <returns>Returns the current Vu value.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10.EditorKey(System.Int32)">
            <summary>
            Called when a key stroke occurs in the editor.
            </summary>
            <param name="keycode">The key code value.</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10.EditorTop">
            <summary>
            The window that hosts the plugin editor is put on top of other windows.
            </summary>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10.EditorSleep">
            <summary>
            The window that hosts the plugin editor is put in the background.
            </summary>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated10.Identify">
            <summary>
            Returns an identifaction code.
            </summary>
            <returns>Returns 'NvEf' as an integer.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20">
            <summary>
            Contains all the operations from VST 2.0 that were deprecated in VST 2.4.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.GetProgramCategoriesCount">
            <summary>
            Retrieves the number of program categories.
            </summary>
            <returns>Returns the number of program categories.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.CopyCurrentProgramTo(System.Int32)">
            <summary>
            Copy the current program to the program at <paramref name="programIndex"/>.
            </summary>
            <param name="programIndex">A zero-based index into the program collection.</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.ConnectInput(System.Int32,System.Boolean)">
            <summary>
            Notifies the plugin of the fact that an input pin was dis/connected.
            </summary>
            <param name="inputIndex">A zero-based index into the input connection collection.</param>
            <param name="connected">Indicates if the pin was connected (True) or disconnected (False).</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.ConnectOutput(System.Int32,System.Boolean)">
            <summary>
            Notifies the plugin of the fact that an output pin was dis/connected.
            </summary>
            <param name="outputIndex">A zero-based index into the output connection collection.</param>
            <param name="connected">Indicates if the pin was connected (True) or disconnected (False).</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.GetCurrentPosition">
            <summary>
            For external DSP.
            </summary>
            <returns>Returns the current position.</returns>
            <remarks>The <see cref="T:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags"/>.ExtIsAsync 
            must be set in order for this method to be called.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.GetDestinationBuffer">
            <summary>
            For external DSP.
            </summary>
            <returns>Returns the destination audio buffer.</returns>
            <remarks>The <see cref="T:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags"/>.ExtHasBuffer 
            must be set in order for this method to be called.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.SetBlockSizeAndSampleRate(System.Int32,System.Single)">
            <summary>
            Assigns a new block size and sample rate value to the plugin.
            </summary>
            <param name="blockSize">The number of samples per frame (cycle).</param>
            <param name="sampleRate">The new sample rate.</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.GetErrorText">
            <summary>
            Retrieves an error text from the plugin.
            </summary>
            <returns>Returns the error text.</returns>
            <remarks>The length of the text must not exceed 256 characters.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.Idle">
            <summary>
            Called by the host to allow some light idle processing by the plugin.
            </summary>
            <returns>Returns True when subsequent Idle calls should follow. 
            False is returned when no further Idle processing is required.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.GetIcon">
            <summary>
            Retrieves an iconic representation of the plugin.
            </summary>
            <returns>Returns null when not supported.</returns>
            <remarks>The VST specs are not final for this method. Not supported.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.SetViewPosition(System.Drawing.Point@)">
            <summary>
            Moves the view to a new position inside the window.
            </summary>
            <param name="position">The x and y coordinates.</param>
            <returns>Returns true if the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20.KeysRequired">
            <summary>
            Indicates if keys are required by the plugin.
            </summary>
            <returns>Returns true if keys are required.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.VstGenericEvent">
            <summary>
            The VstGenericEvent represents an event of one of the deprecated event types.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstGenericEvent.#ctor(Jacobi.Vst.Core.VstEventTypes,System.Int32,System.Byte[])">
            <summary>
            Constructs a new immutable instance.
            </summary>
            <param name="eventType">The type of event. Cannot be <see cref="F:Jacobi.Vst.Core.VstEventTypes.MidiEvent"/> or <see cref="F:Jacobi.Vst.Core.VstEventTypes.MidiSysExEvent"/>.</param>
            <param name="deltaFrames">The start of this event in the number of delta frames from the current cycle.</param>
            <param name="data">The associated data for this event.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter">
            <summary>
            This class implements an extension to the <see cref="T:Jacobi.Vst.Core.Host.VstHostCommandAdapter"/> to include all depricated Host members.
            </summary>
            <remarks>
            Only instantiate this class when you have a reference to an implementation of the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> interface.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.#ctor(Jacobi.Vst.Core.Host.IVstHostCommandStub)">
            <summary>
            Constructs a new adapter instance on the passed <paramref name="hostCmdStub"/>.
            </summary>
            <param name="hostCmdStub">An implementation of the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> interface. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.WantMidi">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.SetTime(Jacobi.Vst.Core.VstTimeInfo,Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="filterFlags">Passed with the forwarded call.</param>
            <param name="timeInfo">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetTempoAt(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="sampleIndex">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetAutomatableParameterCount">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetParameterQuantization(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="parameterIndex">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.NeedIdle">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetPreviousPlugin(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="pinIndex">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetNextPlugin(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="pinIndex">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.WillReplaceOrAccumulate">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.SetOutputSampleRate(System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="sampleRate">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetOutputSpeakerArrangement">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.SetIcon(System.IntPtr)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="icon">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.OpenWindow">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.CloseWindow(System.IntPtr)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="wnd">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.EditFile(System.String)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="xml">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetChunkFile">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.GetInputSpeakerArrangement">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.PinConnected(System.Int32,System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstHostCommandsDeprecated20"/> implementation.
            </summary>
            <param name="connectionIndex">Passed with the forwarded call.</param>
            <param name="output">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter.Dispose(System.Boolean)">
            <summary>
            Called to dispose of this instance.
            </summary>
            <param name="disposing">When true also dispose of managed resources. Otherwise only dispose of unmanaged resources.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter">
            <summary>
            This class implements an extension to the <see cref="T:Jacobi.Vst.Core.Host.VstPluginCommandAdapter"/> to include all depricated Host members.
            </summary>
            <remarks>
            Only instantiate this class when you have a reference to an implementation of the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> interface.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.#ctor(Jacobi.Vst.Core.Plugin.IVstPluginCommandStub)">
            <summary>
            Constructs a new instance on the passed <paramref name="pluginCmdStub"/>.
            </summary>
            <param name="pluginCmdStub">An implementation of the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> interface. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetProgramCategoriesCount">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.CopyCurrentProgramTo(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.ConnectInput(System.Int32,System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.ConnectOutput(System.Int32,System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetCurrentPosition">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetDestinationBuffer">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.SetBlockSizeAndSampleRate(System.Int32,System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetErrorText">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.Idle">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetIcon">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.SetViewPosition(System.Drawing.Point@)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.KeysRequired">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.GetVu">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.EditorKey(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.EditorTop">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.EditorSleep">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.Identify">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter.ProcessAcc(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Deprecated.IVstPluginCommandsDeprecated20"/> implementation.
            </summary>
            <param name="inputs">Passed with the forwarded call.</param>
            <param name="outputs">Passed with the forwarded call.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedInfo">
            <summary>
            Plugin deprecated information passed to the Host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedInfo.DeprecatedFlags">
            <summary>
            Plugin flags.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedInfo.RealQualities">
            <summary>
            Number of realtime qualities (0: realtime).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedInfo.OfflineQualities">
            <summary>
            Number of offline qualities (0: realtime only).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedInfo.IoRatio">
            <summary>
            Input samplerate to output samplerate ratio, not used yet.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags">
            <summary>
            Deprecated capability flags for the plugin.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.None">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.HasClip">
            <summary>Return > 1. in getVu() if clipped.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.HasVu">
            <summary>Return vu value in getVu(); > 1. means clipped.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.CanMono">
            <summary>If numInputs == 2, makes sense to be used for mono in.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.ExtIsAsync">
            <summary>For external dsp; plug returns immedeately from process()
            host polls plug position (current block) via effGetCurrentPosition.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.Deprecated.VstPluginDeprecatedFlags.ExtHasBuffer">
            <summary>external dsp, may have their own output buffe (32 bit float)
            host then requests this via effGetDestinationBuffer.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Diagnostics.ErrorHelper">
            <summary>
            Helper class for formatting errors.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.ErrorHelper.FormatException(System.Exception)">
            <summary>
            Formats the <paramref name="e"/>xception text.
            </summary>
            <param name="e">The exception to format the error text for.</param>
            <returns>Returns the error text for the specified <paramref name="e"/>xception and its <see cref="P:System.Exception.InnerException"/>s.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.ErrorHelper.BuildExceptionText(System.Text.StringBuilder,System.Exception)">
            <summary>
            Formats the text for the <paramref name="e"/>xception.
            </summary>
            <param name="text">The <see cref="T:System.Text.StringBuilder"/> that receives the text.</param>
            <param name="e">Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.ErrorHelper.BuildReflectionTypeLoadExceptionText(System.Text.StringBuilder,System.Reflection.ReflectionTypeLoadException)">
            <summary>
            Specialized formatter for <see cref="T:System.Reflection.ReflectionTypeLoadException"/>.
            </summary>
            <param name="text">The <see cref="T:System.Text.StringBuilder"/> that receives the text.</param>
            <param name="rtle">A reference to the specialized exception. Can be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Diagnostics.TraceContext">
            <summary>
            This class represents the context that is used during tracing debug messages.
            </summary>
            <remarks>
            Internally this class uses the <see cref="T:System.Diagnostics.TraceSource"/> class to output its trace messages. \
            Therefor you can configure its options in a standard config file.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.#ctor(System.String,System.Type)">
            <summary>
            Consrtucts a new instance using the <paramref name="contextName"/> and specified <paramref name="commandInterface"/>.
            </summary>
            <param name="contextName">The name of the context by which it can be referenced in the config file. Must not be null or empty.</param>
            <param name="commandInterface">An optional indication of what command interface this instance traces for. 
            This parameter is also used to translate the <b>opcode</b> parameter of the <see cref="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteDispatchBegin(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Single)"/> method.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.ShouldTrace(System.Diagnostics.TraceEventType)">
            <summary>
            Indicates if the specified <paramref name="eventType"/> is enable and should produce a trace.
            </summary>
            <param name="eventType">An indication of the type of trace event.</param>
            <returns>Returns true when the specified <paramref name="eventType"/> should produce a trace.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteDispatchBegin(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Writes a start trace of the Dispatch method.
            </summary>
            <param name="opcode">The dispatched opcode.</param>
            <param name="index">Optional dispatch paremeter.</param>
            <param name="value">Optional dispatch paremeter.</param>
            <param name="ptr">Optional dispatch paremeter.</param>
            <param name="opt">Optional dispatch paremeter.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteDispatchEnd(System.IntPtr)">
            <summary>
            Writes an end trace of the Dispatch method.
            </summary>
            <param name="result">The value returned from the Dispatch method.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteError(System.Exception)">
            <summary>
            Writes an error trace for the <paramref name="exception"/>.
            </summary>
            <param name="exception">Must not be null.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Error"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteProcess(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a trace for the Process method.
            </summary>
            <param name="inputBufferCount">The number of input buffers.</param>
            <param name="outputBufferCount">The number of output buffers.</param>
            <param name="inputSampleCount">The number of samples in the input buffers.</param>
            <param name="outputSampleCount">The number of samples in the output buffers.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteGetParameterBegin(System.Int32)">
            <summary>
            Writes a start trace for the GetParameters method.
            </summary>
            <param name="parameterIndex">The index of the parameter requested.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteGetParameterEnd(System.Single)">
            <summary>
            Writes the end trace for the GetParameter method.
            </summary>
            <param name="value">The parameter value that will be returned from the GetParameter method.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteSetParameter(System.Int32,System.Single)">
            <summary>
            Writes a trace for the SetParameter method.
            </summary>
            <param name="parameterIndex">The index of the parameter.</param>
            <param name="value">The value for the paremeter.</param>
            <remarks>
            The trace text is output as a <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> event type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteEvent(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Writes a generic trace containing the specified <paramref name="message"/>.
            </summary>
            <param name="eventType">The type of trace event.</param>
            <param name="message">The trace message text.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.WriteEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a generic trace containing the <paramref name="format"/>ted string containing the <paramref name="parameters"/>.
            </summary>
            <param name="eventType">The type of trace event.</param>
            <param name="format">A string formatter.</param>
            <param name="parameters">Variable arguments used in the <paramref name="format"/> string.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Diagnostics.TraceContext.OpcodeInfo">
            <summary>
            A private class that contains information on a dispatcher opcode.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.OpcodeInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="description">The human readable description of the opcode.</param>
            <param name="deprecated">An indication if the opcode was deprecated.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.Diagnostics.TraceContext.OpcodeInfo.Description">
            <summary>
            Gets the opcode description.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Diagnostics.TraceContext.OpcodeInfo.Deprecated">
            <summary>
            Gets an indication if the opcode is deprecated.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Diagnostics.TraceContext.OpcodeInfo.FormatArguments(System.Int32,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Formats the dispatcher method parameters into a text string.
            </summary>
            <param name="index">Optional dispatcher parameter.</param>
            <param name="value">Optional dispatcher parameter.</param>
            <param name="ptr">Optional dispatcher parameter.</param>
            <param name="opt">Optional dispatcher parameter.</param>
            <returns>Returns the formatted text containing the optional dispatcher method parameters.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.FourCharacterCode">
            <summary>
            This structure encapsulates a Four Character Code as a string.
            </summary>
            <remarks>
            Note that this type is defined as a structure. It is therefor a value-type.
            </remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.FourCharacterCode.#ctor(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Constructs a new instance based on four seperate characters.
            </summary>
            <param name="c1">Most significant character.</param>
            <param name="c2">Character 2.</param>
            <param name="c3">Character 3.</param>
            <param name="c4">Least significant character</param>
        </member>
        <member name="M:Jacobi.Vst.Core.FourCharacterCode.#ctor(System.String)">
            <summary>
            Constructs an instance based on a string <paramref name="value"/>.
            </summary>
            <param name="value">A string of exactly four characters.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.FourCharacterCode.Value">
            <summary>
            Gets or sets the Four Character Code value as a string.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.FourCharacterCode.ToString">
            <summary>
            Retrieves the FCC as a string.
            </summary>
            <returns>Returns the <see cref="P:Value"/> property.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.FourCharacterCode.ToInt32">
            <summary>
            Retrieves the FCC as an integer.
            </summary>
            <returns>Returns an 32-bit integer value representing the the FCC.</returns>
            <remarks>ASCII encoding on the <see cref="P:Jacobi.Vst.Core.FourCharacterCode.Value"/> property is used to convert the FCC.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.Host.IVstHostCommandStub">
            <summary>
            The IVstHostCommandStub interface is implemented by the command stub for handling 
            incoming Host commands from the Plugin at the interop assembly.
            </summary>
            <remarks>The interface derives from <see cref="T:Jacobi.Vst.Core.IVstHostCommands20"/>.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.IVstHostCommandStub.PluginContext">
            <summary>
            Gets or sets the plugin context this instance is part of.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Host.IVstPluginCommandStub">
            <summary>
            The IVstPluginCommandStub interface is implemented by the command stub for the Plugin commands
            in the Interop assembly.
            </summary>
            <remarks>The interfaces derives from <see cref="T:Jacobi.Vst.Core.IVstPluginCommands24"/>.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.IVstPluginCommandStub.PluginContext">
            <summary>
            Gets or sets the plugin context this instance is part of.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Host.IVstPluginContext">
            <summary>
            The IVstPluginContext interface represents the Plugin Context interface that is shared to other objects.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.IVstPluginContext.Set``1(System.String,``0)">
            <summary>
            Sets a context property identified by <paramref name="keyName"/> to a new <paramref name="value"/>.
            </summary>
            <typeparam name="T">Inferred, no need to specify it explicitly.</typeparam>
            <param name="keyName">The unique identification of the context property.</param>
            <param name="value">The new value to store in the context for the context property.</param>
            <remarks>The <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event is raised when the property value is overwritten.
            If the property did not exist yet, it is created but no event is raised.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.IVstPluginContext.Find``1(System.String)">
            <summary>
            Retrieves the value of a context property identified by <paramref name="keyName"/>.
            </summary>
            <typeparam name="T">Specifies the data type of the context property identified by <paramref name="keyName"/>.</typeparam>
            <param name="keyName">The unique identification of the context property.</param>
            <returns>Returns null if the property was not found.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.IVstPluginContext.Remove(System.String)">
            <summary>
            Removes the property identified by <paramref name="keyName"/> from the context.
            </summary>
            <param name="keyName">The unique identification of the context property.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.IVstPluginContext.Delete(System.String)">
            <summary>
            Removes the property identified by <paramref name="keyName"/> from the context and
            calls <see cref="M:System.IDisposable.Dispose"/> if the data 'value' implements it.
            </summary>
            <param name="keyName">The unique identification of the context property.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.IVstPluginContext.HostCommandStub">
            <summary>
            Gets a reference to the HostCommandStub.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.IVstPluginContext.PluginCommandStub">
            <summary>
            Gets a reference to the PluginCommandStub.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.IVstPluginContext.PluginInfo">
            <summary>
            Gets a reference to the plug information.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.IVstPluginContext.AcceptPluginInfoData(System.Boolean)">
            <summary>
            Promotes the plugin information published in the <b>AEffect</b> structure to the <see cref="P:Jacobi.Vst.Core.Host.IVstPluginContext.PluginInfo"/> property.
            </summary>
            <param name="raiseEvents">When true the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event is raised for
            each property that has changed.
            The property names of the <see cref="T:Jacobi.Vst.Core.Plugin.VstPluginInfo"/> class are prefixed with 'PluginInfo.'.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.Host.VstHostCommandAdapter">
            <summary>
            The VstHostCommandAdapter class implements the Plugin <see cref="T:Jacobi.Vst.Core.Plugin.IVstHostCommandStub"/>
            interface and forwards those calls to a <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation
            provided when the adapter class is constructed.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.#ctor(Jacobi.Vst.Core.Host.IVstHostCommandStub)">
            <summary>
            Constructs a new instance based on the <paramref name="hostCmdStub"/>
            </summary>
            <param name="hostCmdStub">Will be used to forward calls to. Must not be null.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.IsInitialized">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.UpdatePluginInfo(Jacobi.Vst.Core.Plugin.VstPluginInfo)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="pluginInfo">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetTimeInfo(Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="filterFlags">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="events">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.IoChanged">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.SizeWindow(System.Int32,System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="width">Passed with the forwarded call.</param>
            <param name="height">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetSampleRate">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetBlockSize">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetInputLatency">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetOutputLatency">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetProcessLevel">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetAutomationState">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetVendorString">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetProductString">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetVendorVersion">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.CanDo(System.String)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="cando">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetLanguage">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetDirectory">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.UpdateDisplay">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.BeginEdit(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.EndEdit(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="fileSelect">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.CloseFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.SetParameterAutomated(System.Int32,System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <param name="value">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetVersion">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.GetCurrentPluginID">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.ProcessIdle">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.Dispose">
            <summary>
            Clears the reference to the <see cref="T:Jacobi.Vst.Core.Host.IVstHostCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.Dispose(System.Boolean)">
            <summary>
            Called to dispose this object instance.
            </summary>
            <param name="disposing">When true also disposes of managed resources. Otherwise only unmanaged resources are disposed.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstHostCommandAdapter.Create(Jacobi.Vst.Core.Host.IVstHostCommandStub)">
            <summary>
            A factory method to create the correct <see cref="T:Jacobi.Vst.Core.Host.VstHostCommandAdapter"/> class type.
            </summary>
            <param name="hostCmdStub">A reference to the host command stub. Must not be null.</param>
            <returns>Returns an instance of <see cref="T:Jacobi.Vst.Core.Deprecated.VstHostCommandDeprecatedAdapter"/> when the <paramref name="hostCmdStub"/> supports deprecated methods.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Host.VstPluginCommandAdapter">
            <summary>
            The VstPluginCommandAdapter class implements the Plugin <see cref="T:Jacobi.Vst.Core.Host.IVstPluginCommandStub"/>
            interface and forwards those calls to a <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation
            provided when the adapter class is constructed.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.#ctor(Jacobi.Vst.Core.Plugin.IVstPluginCommandStub)">
            <summary>
            Constructs a new instance based on the <paramref name="pluginCmdStub"/>
            </summary>
            <param name="pluginCmdStub">Will be used to forward calls to. Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.PluginContext">
            <inheritdoc />
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetProcessPrecision(Jacobi.Vst.Core.VstProcessPrecision)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="precision">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetNumberOfMidiInputChannels">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetNumberOfMidiOutputChannels">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement@,Jacobi.Vst.Core.VstSpeakerArrangement@)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="input">Passed with the forwarded call and back.</param>
            <param name="output">Passed with the forwarded call and back.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetNextPlugin(System.String@)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.StartProcess">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.StopProcess">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetPanLaw(Jacobi.Vst.Core.VstPanLaw,System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="type">Passed with the forwarded call.</param>
            <param name="gain">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.BeginLoadBank(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="chunkInfo">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.BeginLoadProgram(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="chunkInfo"></param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorKeyDown(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="ascii">Passed with the forwarded call.</param>
            <param name="virtualKey">Passed with the forwarded call.</param>
            <param name="modifers">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorKeyUp(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="ascii">Passed with the forwarded call.</param>
            <param name="virtualKey">Passed with the forwarded call.</param>
            <param name="modifers">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetEditorKnobMode(Jacobi.Vst.Core.VstKnobMode)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="mode">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="midiProgram">Passed with the forwarded call.</param>
            <param name="channel">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetCurrentMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="midiProgram">Passed with the forwarded call.</param>
            <param name="channel">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetMidiProgramCategory(Jacobi.Vst.Core.VstMidiProgramCategory,System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="midiCat">Passed with the forwarded call.</param>
            <param name="channel">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.HasMidiProgramsChanged(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="channel">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetMidiKeyName(Jacobi.Vst.Core.VstMidiKeyName,System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="midiKeyName">Passed with the forwarded call.</param>
            <param name="channel">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.BeginSetProgram">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EndSetProgram">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="events">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.CanParameterBeAutomated(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.String2Parameter(System.Int32,System.String)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <param name="str">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetProgramNameIndexed(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetInputProperties(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetOutputProperties(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetCategory">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement,Jacobi.Vst.Core.VstSpeakerArrangement)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="saInput">Passed with the forwarded call.</param>
            <param name="saOutput">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetBypass(System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="bypass">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetEffectName">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetVendorString">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetProductString">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetVendorVersion">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.CanDo(System.String)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="cando">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetTailSize">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetParameterProperties(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetVstVersion">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.Open">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.Close">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetProgram(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="programNumber">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetProgram">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetProgramName(System.String)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="name">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetProgramName">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetParameterLabel(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetParameterDisplay(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetParameterName(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetSampleRate(System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="sampleRate">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetBlockSize(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="blockSize">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.MainsChanged(System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="onoff">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorGetRect(System.Drawing.Rectangle@)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="rect">Passed with the forwarded call and back.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorOpen(System.IntPtr)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="hWnd">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorClose">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.EditorIdle">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetChunk(System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="isPreset">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetChunk(System.Byte[],System.Boolean)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="data">Passed with the forwarded call.</param>
            <param name="isPreset">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.ProcessReplacing(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="inputs">Passed with the forwarded call.</param>
            <param name="outputs">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.ProcessReplacing(Jacobi.Vst.Core.VstAudioPrecisionBuffer[],Jacobi.Vst.Core.VstAudioPrecisionBuffer[])">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="inputs">Passed with the forwarded call.</param>
            <param name="outputs">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.SetParameter(System.Int32,System.Single)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <param name="value">Passed with the forwarded call.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.GetParameter(System.Int32)">
            <summary>
            This call is forwarded to the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> implementation.
            </summary>
            <param name="index">Passed with the forwarded call.</param>
            <returns>Returns the value returned from the forwarded call.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Host.VstPluginCommandAdapter.Create(Jacobi.Vst.Core.Plugin.IVstPluginCommandStub)">
            <summary>
            A factory method to create the correct <see cref="T:Jacobi.Vst.Core.Host.VstPluginCommandAdapter"/> class type.
            </summary>
            <param name="pluginCmdStub">A reference to the plugin command stub. Must not be null.</param>
            <returns>Returns an instance of <see cref="T:Jacobi.Vst.Core.Deprecated.VstPluginCommandDeprecatedAdapter"/> when the <paramref name="pluginCmdStub"/> supports deprecated methods.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IDirectBufferAccess32">
            <summary>
            Provides unmanged buffer access to an audio buffer
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.IDirectBufferAccess32.SampleCount">
            <summary>
            Gets the number of samples (floats) in the buffer
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.IDirectBufferAccess32.Buffer">
            <summary>
            Gets the pointer to the audio buffer
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.IDirectBufferAccess64">
            <summary>
            Provides unmanged buffer access to an audio buffer
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.IDirectBufferAccess64.SampleCount">
            <summary>
            Gets the number of samples (doubles) in the buffer
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.IDirectBufferAccess64.Buffer">
            <summary>
            Gets the pointer to the audio buffer
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstHostCommands10">
            <summary>
            The Vst 1.0 Host commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands10.SetParameterAutomated(System.Int32,System.Single)">
            <summary>
            Notifies the Host that the value of the parameter at <paramref name="index"/> has a new <paramref name="value"/>.
            </summary>
            <param name="index">Must be greater/equal to zero and smaller than the parameter count.</param>
            <param name="value">The new value assigned to the parameter.</param>
            <remarks>The plugin can call this method to allow the parameter value change to be automated by the host.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands10.GetVersion">
            <summary>
            Retrieves the version number of the host.
            </summary>
            <returns>Usually the version number is in thousends. For example 1100 means version 1.1.0.0.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands10.GetCurrentPluginID">
            <summary>
            Retrieves the unique plugin ID of the current plugin.
            </summary>
            <returns>Returns the Four Character Code as an integer.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands10.ProcessIdle">
            <summary>
            Yield execution control to the host.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstHostCommands20">
            <summary>
            The Vst 2.0 Host commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetTimeInfo(Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
            Retrieves time info in a specific format.
            </summary>
            <param name="filterFlags">Indicates the preferred time information format.</param>
            <returns>Returns time information but not necessarilly in the format specified by <paramref name="filterFlags"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            Requests the host to process the <paramref name="events"/>.
            </summary>
            <param name="events">Must not be null.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.IoChanged">
            <summary>
            Notifies the host that the plugin IO has changed.
            </summary>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.SizeWindow(System.Int32,System.Int32)">
            <summary>
            Sizes the Host window to the specified dimensions.
            </summary>
            <param name="width">Width of the window in pixels.</param>
            <param name="height">Height of the window in pixels.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetSampleRate">
            <summary>
            Retrieves the current sample rate from the host.
            </summary>
            <returns>Returns the number of samples per second.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetBlockSize">
            <summary>
            Retrieves the number of samples passed to the plugin during the audio processing cycles.
            </summary>
            <returns>Returns the number of samples.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetInputLatency">
            <summary>
            Retrieves the latency concerning audio input.
            </summary>
            <returns>Returns the latency in number of samples?</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetOutputLatency">
            <summary>
            Retrieves the latency concerning audio output.
            </summary>
            <returns>Returns the latency in number of samples?</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetProcessLevel">
            <summary>
            Returns an indication of what Host Thread is currently calling into the plugin.
            </summary>
            <returns>Returns a thread identifier.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetAutomationState">
            <summary>
            Retrieves the level of automation supported by the host.
            </summary>
            <returns>Returns a value indicating the automation level.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetVendorString">
            <summary>
            Retrieves the host vendor string.
            </summary>
            <returns>Never returns null?</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetProductString">
            <summary>
            Retrieves the host product infotmation.
            </summary>
            <returns>Never returns null?</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetVendorVersion">
            <summary>
            Retrieves the host version.
            </summary>
            <returns>Never returns 0 (zero).</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.CanDo(System.String)">
            <summary>
            Queries the host for specific support.
            </summary>
            <param name="cando">A host capability.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstCanDoResult.Yes"/> if the host supports the capability.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetLanguage">
            <summary>
            Retrieves the localized langauge of the host.
            </summary>
            <returns>Returns an value indicating the host UI language.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.GetDirectory">
            <summary>
            Retieves the base directory for the plugin.
            </summary>
            <returns>Returns a rooted path.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.UpdateDisplay">
            <summary>
            Request the host to update its display.
            </summary>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.BeginEdit(System.Int32)">
            <summary>
            Notifies the host that the parameter at <paramref name="index"/> is about to be edited.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.EndEdit(System.Int32)">
            <summary>
            Notifies the host that the parameter at <paramref name="index"/> was edited.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            Opens the file selector in the host.
            </summary>
            <param name="fileSelect">A structure describing the options and settings.</param>
            <returns>Returns true if supported by the host.</returns>
            <remarks>On return (if true) the selected paths are filled in <paramref name="fileSelect"/>.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstHostCommands20.CloseFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
            Cleans up the unmanaged resources consumed by a call to <see cref="M:Jacobi.Vst.Core.IVstHostCommands20.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)"/>.
            </summary>
            <param name="fileSelect">The exact same instance that was also passed to <see cref="M:Jacobi.Vst.Core.IVstHostCommands20.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)"/>.</param>
            <returns>Returns true if supported by the host.</returns>
            <remarks>This method must always be called when <see cref="M:Jacobi.Vst.Core.IVstHostCommands20.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)"/> returned true. 
            Otherwise unmanaged memory will leak.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommandsBase">
            <summary>
            The Vst Plugin callback functions
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommandsBase.ProcessReplacing(Jacobi.Vst.Core.VstAudioBuffer[],Jacobi.Vst.Core.VstAudioBuffer[])">
            <summary>
            Called by the host once every cycle to process incoming audio as well as output audio.
            </summary>
            <param name="inputs">An array with audio input buffers.</param>
            <param name="outputs">An array with audio output buffers.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommandsBase.ProcessReplacing(Jacobi.Vst.Core.VstAudioPrecisionBuffer[],Jacobi.Vst.Core.VstAudioPrecisionBuffer[])">
            <summary>
            Called by the host once every cycle to process incoming audio as well as output audio.
            </summary>
            <param name="inputs">An array with audio input buffers.</param>
            <param name="outputs">An array with audio output buffers.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommandsBase.SetParameter(System.Int32,System.Single)">
            <summary>
            Called by the host to assign a new <paramref name="value"/> to the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-base index into the parameters collection.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommandsBase.GetParameter(System.Int32)">
            <summary>
            Called by the host to retrieve the current value of the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-base index into the parameters collection.</param>
            <returns>Returns 0.0 the value for the parameter at <paramref name="index"/>.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommands10">
            <summary>
            The Vst 1.0 Plugin commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.Open">
            <summary>
            This is the first method called by the host right after the assembly is loaded.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.Close">
            <summary>
            This is the last method the host calls. Dispose your resources.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.SetProgram(System.Int32)">
            <summary>
            The plugin should activate the Program at <paramref name="programNumber"/>.
            </summary>
            <param name="programNumber">A zero-based program number (index).</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetProgram">
            <summary>
            Retrieve the current program index.
            </summary>
            <returns>Returns the current program index or 0 as a default.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.SetProgramName(System.String)">
            <summary>
            Assign a new name to the current/active program.
            </summary>
            <param name="name">The new program name.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetProgramName">
            <summary>
            Retrieves the name of the current/active program.
            </summary>
            <returns>Can return null or an empty string.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetParameterLabel(System.Int32)">
            <summary>
            Retrieves the label for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Can return null or an empty string.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetParameterDisplay(System.Int32)">
            <summary>
            Retrieves the display value for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Can return null or an empty string.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetParameterName(System.Int32)">
            <summary>
            Retrieves the name for the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Can return null or an empty string.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.SetSampleRate(System.Single)">
            <summary>
            Assigns the <paramref name="sampleRate"/> to the plugin.
            </summary>
            <param name="sampleRate">The number of audio samples per second.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.SetBlockSize(System.Int32)">
            <summary>
            Assigns the <paramref name="blockSize"/> to the plugin.
            </summary>
            <param name="blockSize">The number samples per cycle.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.MainsChanged(System.Boolean)">
            <summary>
            Called by the host when the users has turned the plugin on or off.
            </summary>
            <param name="onoff">True when on, false when off.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.EditorGetRect(System.Drawing.Rectangle@)">
            <summary>
            Called by the host to retrieve the bounding rectangle of the editor.
            </summary>
            <param name="rect">The rectangle receiving the bounds.</param>
            <returns>Returns true when the <paramref name="rect"/> was set.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.EditorOpen(System.IntPtr)">
            <summary>
            Called by the host to open the plugin custom editor.
            </summary>
            <param name="hWnd">The handle to the parent window.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.EditorClose">
            <summary>
            Called by the host to close (and destroy) the plugin custom editor.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.EditorIdle">
            <summary>
            Called by the host when the editor is idle.
            </summary>
            <remarks>Keep your processing short.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.GetChunk(System.Boolean)">
            <summary>
            Called by the host to retrieve a buffer with Program (and Parameter) content.
            </summary>
            <param name="isPreset">True if only the current/active program should be serialized,
            otherwise (false) the complete program bank should be serialized.</param>
            <returns>Returns null when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands10.SetChunk(System.Byte[],System.Boolean)">
            <summary>
            Called by the host to load in a previously serialized program buffer.
            </summary>
            <param name="data">The buffer provided by the host that contains the program data.</param>
            <param name="isPreset">True if only the current/active program should be deserialized,
            otherwise (false) the complete program bank should be deserialized.</param>
            <returns>Returns the number of bytes read from the <paramref name="data"/> buffer or
            zero not implemented.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommands20">
            <summary>
            The Vst 2.0 Plugin commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
            Called by the host when the plugin has specified the <see cref="F:Jacobi.Vst.Core.VstPluginCanDo.ReceiveVstMidiEvent"/> flag.
            </summary>
            <param name="events">The (Midi) events for the current 'block'.</param>
            <returns>Returns false if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.CanParameterBeAutomated(System.Int32)">
            <summary>
            Called by the host to query the plugin whether the parameter at <paramref name="index"/> can be automated.
            </summary>
            <param name="index">The zero-based index into the parameters.</param>
            <returns>Returns true if the parameter can be automated or false if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.String2Parameter(System.Int32,System.String)">
            <summary>
            Parses the <paramref name="str"/> value to assign to the parameter at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-base parameter index.</param>
            <param name="str">The value for the parameter.</param>
            <returns>Returns true when the parameter was successfully parsed or
            false if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetProgramNameIndexed(System.Int32)">
            <summary>
            Retrieves the name of the program at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-base index into the plugin Programs.</param>
            <returns>Returns null if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetInputProperties(System.Int32)">
            <summary>
            Retrieves the pin properties for the input at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin inputs.</param>
            <returns>Returns null if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetOutputProperties(System.Int32)">
            <summary>
            Retrieves the pin properties for the output at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin outputs.</param>
            <returns>Returns null if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetCategory">
            <summary>
            Retrieves a categorization value for the plugin.
            </summary>
            <returns>Returns the plugin category.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.SetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement,Jacobi.Vst.Core.VstSpeakerArrangement)">
            <summary>
            Under Construction
            </summary>
            <param name="saInput">Must not be null.</param>
            <param name="saOutput">Must not be null.</param>
            <returns>Returns false if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.SetBypass(System.Boolean)">
            <summary>
            Called by the host to bypass plugin processing.
            </summary>
            <param name="bypass">True to bypass, false to process.</param>
            <returns>Returns false if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetEffectName">
            <summary>
            Called by the host to retrieve the name of plugin.
            </summary>
            <returns>Returns the name. Must not be null.</returns>
            <remarks>The plugin name should not exceed 31 characters.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetVendorString">
            <summary>
            Called to retrieve the plugin vendor information.
            </summary>
            <returns>Returns the Vendor name.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetProductString">
            <summary>
            Called to retrieve the plugin product information.
            </summary>
            <returns>Returns the Product name.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetVendorVersion">
            <summary>
            Called to retrieve the plugin version information.
            </summary>
            <returns>Returns the Version number.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.CanDo(System.String)">
            <summary>
            Called by the host to query the plugin if a certain behavior or aspect is supported.
            </summary>
            <param name="cando">The string containing the can-do string, which can be host specific.</param>
            <returns>Returns an indication if the capability is supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetTailSize">
            <summary>
            Called by the host to retrieve the number of samples that the plugin outputs after the input has gone silent.
            </summary>
            <returns>Returns zero if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetParameterProperties(System.Int32)">
            <summary>
            Called by the host to retrieve information about a plugin parameter at <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index into the plugin parameters.</param>
            <returns>Returns null if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands20.GetVstVersion">
            <summary>
            Called by the host to query the plugin what VST version it supports.
            </summary>
            <returns>Return 2400 for VST 2.4.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommands21">
            <summary>
            The Vst 2.1 Plugin commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.EditorKeyDown(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user presses a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.EditorKeyUp(System.Byte,Jacobi.Vst.Core.VstVirtualKey,Jacobi.Vst.Core.VstModifierKeys)">
            <summary>
            Called by the host when the user releases a key.
            </summary>
            <param name="ascii">The identification of the key.</param>
            <param name="virtualKey">Virtual key information.</param>
            <param name="modifers">Additional keys pressed.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.SetEditorKnobMode(Jacobi.Vst.Core.VstKnobMode)">
            <summary>
            Called by the host to set the mode for turning knobs.
            </summary>
            <param name="mode">The mode to use for turning knobs.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.GetMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            Retrieves information about a midi program for a specific Midi <paramref name="channel"/>.
            </summary>
            <param name="midiProgram">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the number of implemented Midi programs or 0 if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.GetCurrentMidiProgramName(Jacobi.Vst.Core.VstMidiProgramName,System.Int32)">
            <summary>
            Retrieves information about the current midi program for a specific Midi <paramref name="channel"/>.
            </summary>
            <param name="midiProgram">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the number of implemented Midi programs or 0 if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.GetMidiProgramCategory(Jacobi.Vst.Core.VstMidiProgramCategory,System.Int32)">
            <summary>
            Retrieves information about a Midi Program Category.
            </summary>
            <param name="midiCat">Must not be null.</param>
            <param name="channel">The zero-based Midi channel.</param>
            <returns>Returns the total number of Midi program categories or 0 if not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.HasMidiProgramsChanged(System.Int32)">
            <summary>
            Indicates if the program for the specified Midi <paramref name="channel"/> has changed.
            </summary>
            <param name="channel">The zero-base Midi channel.</param>
            <returns>Returns true if the Midi Program has changed, otherwise false is returned.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.GetMidiKeyName(Jacobi.Vst.Core.VstMidiKeyName,System.Int32)">
            <summary>
            Retrieves information about a Midi Key (or note).
            </summary>
            <param name="midiKeyName">Must not be null.</param>
            <param name="channel">The zero-base Midi channel.</param>
            <returns>Returns true when the <paramref name="midiKeyName"/>.Name was filled.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.BeginSetProgram">
            <summary>
            Called by the host just before a new Program is set.
            </summary>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands21.EndSetProgram">
            <summary>
            Called by the host just after a new Program is set.
            </summary>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommands23">
            <summary>
            The Vst 2.3 Plugin commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.GetSpeakerArrangement(Jacobi.Vst.Core.VstSpeakerArrangement@,Jacobi.Vst.Core.VstSpeakerArrangement@)">
            <summary>
            Returns the speaker arrangements for the input and output of the plugin.
            </summary>
            <param name="input">Filled with the speaker arrangement for the plugin inputs.</param>
            <param name="output">Filled with the speaker arrangement for the plugin outputs.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.GetNextPlugin(System.String@)">
            <summary>
            Retrieves the unique plugin Id and the name of the next (sub) plugin.
            </summary>
            <param name="name">Filled with the name of the next sub-plugin</param>
            <returns>Returns the unique plugin id.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.StartProcess">
            <summary>
            Called just before the first call to Process is made.
            </summary>
            <returns>It is unclear what this return value represents.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.StopProcess">
            <summary>
            Called just after the last call to Process is made.
            </summary>
            <returns>It is unclear what this return value represents.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.SetPanLaw(Jacobi.Vst.Core.VstPanLaw,System.Single)">
            <summary>
            Informs the plugin of the pan algorithm to use.
            </summary>
            <param name="type">The pan algorithm type.</param>
            <param name="gain">A gain factor.</param>
            <returns>Returns false when not implemented.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.BeginLoadBank(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            Called by the host to query the plugin that supports persistence if the chunk can be read.
            </summary>
            <param name="chunkInfo">Must not be null.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstCanDoResult.Yes"/> if the plugin can read the data.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands23.BeginLoadProgram(Jacobi.Vst.Core.VstPatchChunkInfo)">
            <summary>
            Called by the host to query the plugin that supports persistence if the chunk can be read.
            </summary>
            <param name="chunkInfo">Must not be null.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstCanDoResult.Yes"/> if the plugin can read the data.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.IVstPluginCommands24">
            <summary>
            The Vst 2.4 Plugin commands
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands24.SetProcessPrecision(Jacobi.Vst.Core.VstProcessPrecision)">
            <summary>
            Called by the host query inform the plugin on the precision of audio processing it supports.
            </summary>
            <param name="precision">An indication of either 32 bit or 64 bit samples.</param>
            <returns>Returns true when the requested <paramref name="precision"/> is supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands24.GetNumberOfMidiInputChannels">
            <summary>
            Called by the host to retrieve the number of Midi In channels the plugin supports.
            </summary>
            <returns>Returns the number of Midi In channels, or 0 (zero) if not supported.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.IVstPluginCommands24.GetNumberOfMidiOutputChannels">
            <summary>
            Called by the host to retrieve the number of Midi Out channels the plugin supports.
            </summary>
            <returns>Returns the number of Midi Out channels, or 0 (zero) if not supported.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.AssemblyLoader">
            <summary>
            The AssemblyLoader class manages loading assemblies from non-standard probe paths.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.AssemblyLoader.Current">
            <summary>
            Gets the current (and only) instance of the AssemblyLoader class.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.AssemblyLoader.BasePath">
            <summary>
            The root path to look for loading assemblies.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.AssemblyLoader.LoadAssembly(System.String,System.String)">
            <summary>
            Attempts to load an assembly using the <paramref name="fileName"/> and the <paramref name="extension"/>.
            </summary>
            <param name="fileName">Name of the assembly file without extension. Must not be null or empty.</param>
            <param name="extension">The extensions to check for. Must not be null or empty.</param>
            <returns>Returns null if no suitable assembly file was found.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.Configuration">
            <summary>
            VST.NET specific plugin configuration options
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.Configuration.#ctor(System.String)">
            <summary>
            Open configuration based on the plugin folder.
            </summary>
            <param name="basePath">Must not be null.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.Configuration.PluginConfig">
            <summary>
            Access the plugin config. Returns null if no config is found.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.FileFinder">
            <summary>
            The FileFinder class locates a file on the file system based on several paths and file extensions.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.FileFinder.#ctor">
            <summary>
            A default constructor.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.FileFinder.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="extensions">An enumerator for a list of file extensions.</param>
            <param name="paths">An enumerator for a list of probe paths.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.FileFinder.Extensions">
            <summary>
            Gets the list of file extensions to try.
            </summary>
            <remarks>Include the '.' in each extension.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.FileFinder.Paths">
            <summary>
            Gets a list of file paths to try.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.FileFinder.Find(System.String)">
            <summary>
            Finds a file that exists on the file system using the <see cref="P:Jacobi.Vst.Core.Plugin.FileFinder.Paths"/> and <see cref="P:Jacobi.Vst.Core.Plugin.FileFinder.Extensions"/>.
            </summary>
            <param name="fileNameWithoutExtension">The name of the file to find (without file extension).</param>
            <returns>Returns null if no file was found. Otherwise the full file path is returned.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.IVstHostCommandStub">
            <summary>
            The Vst Host Stub called by the Plugin (Framework).
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.IVstHostCommandStub.IsInitialized">
            <summary>
            Indicates if the host stub is fully initialized and is ready to receive commands.
            </summary>
            <returns>Returns true when initialized.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.IVstHostCommandStub.UpdatePluginInfo(Jacobi.Vst.Core.Plugin.VstPluginInfo)">
            <summary>
            Updates the new <paramref name="pluginInfo"/> with the host.
            </summary>
            <param name="pluginInfo">Must not be null.</param>
            <returns>Returns true if the update was successful.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub">
            <summary>
            The Plugin Command Stub called by the Interop.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub.GetPluginInfo(Jacobi.Vst.Core.Plugin.IVstHostCommandStub)">
            <summary>
            Retrieves the plugin info to pass onto the host.
            </summary>
            <param name="hostCmdStub">A reference to the host command stub the plugin can use to call the host. Must not be null.</param>
            <returns>Returns an instance with the plugin info filled in. 
            If null is returned the plugin load sequence is aborted.</returns>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub.PluginConfiguration">
            <summary>
            Gets or sets the custom plugin specific configuration object.
            </summary>
            <remarks>Can be null if the plugin has not deployed a config file.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.ManagedPluginFactory">
            <summary>
            Loads and creates a managed Vst plugin from an assembly
            </summary>
            <remarks>
            The problem of what CLR assembly to load can be solved with a convention.
            The interop dll that is needed for each managed plugin is renamed to the name of the plugin. 
            The managed plugin assembly must have the same name but with a .net.dll or a .net.vstdll file extension.
            The managed assembly must expose a public class that implements the IVstPluginCommandStub interface.
            </remarks>
        </member>
        <member name="F:Jacobi.Vst.Core.Plugin.ManagedPluginFactory.DefaultManagedExtension">
            <summary>.net.vst2</summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.ManagedPluginFactory.LoadAssemblyByDefaultName(System.String)">
            <summary>
            Loads the managed plugin assembly with the same name as the specified <paramref name="interopAssemblyPath"/>.
            </summary>
            <param name="interopAssemblyPath">The full file path to the interop assembly. Must not be null or empty.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="interopAssemblyPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="interopAssemblyPath"/> is empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when no suitable managed Plugin assembly could be found.</exception>
            <remarks>Note that the managed plugin assembly must be named exactly the same as the <paramref name="interopAssemblyPath"/>
            but with a <b>.net.dll</b> or a <b>.net.vstdll</b> extension.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.ManagedPluginFactory.LoadAssembly(System.String)">
            <summary>
            Attempts to load the assembly by the <paramref name="assemblyName"/>.
            </summary>
            <param name="assemblyName">The name of the assembly, without a path indication or file extension. Must not be null or empty.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when no suitable managed Plugin assembly could be found.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.Plugin.ManagedPluginFactory.CreatePluginCommandStub">
            <summary>
            Creates the public Plugin command stub.
            </summary>
            <returns>Returns an instance of the PluginCommandStub.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no public class could be found 
            that implemented the <see cref="T:Jacobi.Vst.Core.Plugin.IVstPluginCommandStub"/> interface.</exception>
        </member>
        <member name="T:Jacobi.Vst.Core.Plugin.VstPluginInfo">
            <summary>
            Plugin information passed to the Host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.Flags">
            <summary>
            Plugin flags.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.ProgramCount">
            <summary>
            The number of programs the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.ParameterCount">
            <summary>
            The number of parameters the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.AudioInputCount">
            <summary>
            The number of audio inputs the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.AudioOutputCount">
            <summary>
            The number of audio outputs the plugin supports.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.InitialDelay">
            <summary>
            The latency of the plugin audio processing.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.PluginID">
            <summary>
            The unique ID of the plugin.
            </summary>
            <remarks>Must be a four character code.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.Plugin.VstPluginInfo.PluginVersion">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.FourCharacterCode_InvalidValue">
            <summary>
              Looks up a localized string similar to The value is not a valid four character code..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.ManagedPluginFactory_FileNotFound">
            <summary>
              Looks up a localized string similar to Could not find the managed VST plugin assembly with either the .net.dll or .net.vstdll extension..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.ManagedPluginFactory_NoPublicStub">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; does not expose a public class that implements the IVstPluginCommandStub interface..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.Throw_ArgumentIsEmpty">
            <summary>
              Looks up a localized string similar to The argument is empty..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.Throw_ArgumentNotInRange">
            <summary>
              Looks up a localized string similar to The value should lie between &apos;{0}&apos; and &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.Throw_ArgumentTooLong">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is too long. Maximum length is {1} characters..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.VstAudioBuffer_BufferNotWritable">
            <summary>
              Looks up a localized string similar to The Audio buffer is read-only..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.VstAudioBuffer_BufferTooSmall">
            <summary>
              Looks up a localized string similar to The destination buffer is too small..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.VstEvent_InvalidEventType">
            <summary>
              Looks up a localized string similar to Cannot construct an event of type Unknown..
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.Properties.Resources.VstGenericEvent_InvalidEventType">
            <summary>
              Looks up a localized string similar to The specified eventType is not generic (deprecated)..
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.Throw">
            <summary>
            A helper class for method parameter checking.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.Throw.IfArgumentIsNull``1(``0,System.String)">
            <summary>
            Tests if the <paramref name="argument"/> is null.
            </summary>
            <typeparam name="T">Inferred, no need to specify explicitly (in most cases).</typeparam>
            <param name="argument">The value of the argument to test.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="argument"/> is not set to an instance of an object.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.Throw.IfArgumentTooLong(System.String,System.Int32,System.String)">
            <summary>
            Tests if the number of characters in <paramref name="argument"/> exceed the <paramref name="maxLength"/>.
            </summary>
            <param name="argument">The string argument to test.</param>
            <param name="maxLength">The maximum number of characters allowed for the <paramref name="argument"/>.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentException">Thrown when the number of characters of the <paramref name="argument"/>
            exceed the specified <paramref name="maxLength"/>.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.Throw.IfArgumentIsNullOrEmpty(System.String,System.String)">
            <summary>
            Tests if the string <paramref name="argument"/> is an empty string or null.
            </summary>
            <param name="argument">The string argument to test.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="argument"/> is not set to an instance of an object.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="argument"/> is an empty string.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.Throw.IfArgumentNotInRange``1(System.IComparable{``0},``0,``0,System.String)">
            <summary>
            Tests if the <paramref name="argument"/> lies in a range between <paramref name="minValue"/> and <paramref name="maxValue"/>.
            </summary>
            <typeparam name="T">Inferred, no need to specify explicitly (in most cases).</typeparam>
            <param name="argument">The value to test the range for.</param>
            <param name="minValue">The minimal value the <paramref name="argument"/> can have (inclusive).</param>
            <param name="maxValue">The maximum value the <paramref name="argument"/> can have (inclusive).</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value of <paramref name="argument"/>
            does not lie in the range between <paramref name="minValue"/> and <paramref name="maxValue"/>.</exception>
        </member>
        <member name="T:Jacobi.Vst.Core.VstAudioBuffer">
            <summary>
            Represents an audio buffer (mono) passed to plugin by the host.
            </summary>
            <remarks>The VstAudioBuffer implements <see cref="T:Jacobi.Vst.Core.IDirectBufferAccess32"/> for direct, unmanaged access to the buffer.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.VstAudioBuffer.#ctor(System.Single*,System.Int32,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="buffer">The buffer as specified by the host. Must not be null.</param>
            <param name="length">The length of the <paramref name="buffer"/>.</param>
            <param name="canWrite">An indaction if the buffer content can be changed by plugin.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioBuffer.SampleCount">
            <summary>
            Gets the number of samples in the buffer.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioBuffer.CanWrite">
            <summary>
            Gets an indication if the buffer is writable.
            </summary>
            <remarks>Writing to a read-only buffer will generate an exception.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioBuffer.Buffer">
            <summary>
            The raw buffer.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioBuffer.Item(System.Int32)">
            <summary>
            Gets or sets (see remarks) the sample value at <paramref name="index"/>.
            </summary>
            <param name="index">A zer-based index into the buffer.</param>
            <returns>Returns the sample value.</returns>
            <remarks>The setter will cause an exception when <see cref="P:Jacobi.Vst.Core.VstAudioBuffer.CanWrite"/> is false.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name="index"/> was not greater 
            or equal to zero or it was greater or equal to <see cref="P:Jacobi.Vst.Core.VstAudioBuffer.SampleCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the setter was used on a read-only buffer (<see cref="P:Jacobi.Vst.Core.VstAudioBuffer.CanWrite"/> is false).</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioBuffer.Jacobi#Vst#Core#IDirectBufferAccess32#Buffer">
            <summary>
            Unsafe access to the raw sample buffer.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstAudioBuffer.CopyTo(Jacobi.Vst.Core.VstAudioBuffer)">
            <summary>
            Copies the samples from this instance to the <paramref name="destination"/>.
            </summary>
            <param name="destination">The destination audio buffer. Must be writable. Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.VstAudioPrecisionBuffer">
            <summary>
            Represents a double precision audio buffer (mono) passed to plugin by the host.
            </summary>
            <remarks>The VstAudioBuffer implements <see cref="T:Jacobi.Vst.Core.IDirectBufferAccess64"/> for direct, unmanaged access to the buffer.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.VstAudioPrecisionBuffer.#ctor(System.Double*,System.Int32,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="buffer">The buffer as specified by the host. Must not be null.</param>
            <param name="length">The length of the <paramref name="buffer"/>.</param>
            <param name="canWrite">An indaction if the buffer content can be changed by plugin.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.SampleCount">
            <summary>
            Gets the number of samples in the buffer.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.CanWrite">
            <summary>
            Gets an indication if the buffer is writable.
            </summary>
            <remarks>Writing to a read-only buffer will generate an exception.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.Buffer">
            <summary>
            The raw buffer.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.Item(System.Int32)">
            <summary>
            Gets or sets (see remarks) the sample value at <paramref name="index"/>.
            </summary>
            <param name="index">A zer-based index into the buffer.</param>
            <returns>Returns the sample value.</returns>
            <remarks>The setter will cause an exception when <see cref="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.CanWrite"/> is false.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name="index"/> was not greater 
            or equal to zero or it was greater or equal to <see cref="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.SampleCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the setter was used on a read-only buffer (<see cref="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.CanWrite"/> is false).</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstAudioPrecisionBuffer.Jacobi#Vst#Core#IDirectBufferAccess64#Buffer">
            <summary>
            Unsafe access to the raw sample buffer.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstAudioPrecisionBuffer.CopyTo(Jacobi.Vst.Core.VstAudioPrecisionBuffer)">
            <summary>
            Copies the samples from this instance to the <paramref name="destination"/>.
            </summary>
            <param name="destination">The destination audio buffer. Must be writable. Must not be null.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.VstAutomationStates">
            <summary>
            Reports the level of parameter automation support by the host.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstAutomationStates.Unsupported">
            <summary>not supported by Host</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstAutomationStates.Off">
            <summary>off</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstAutomationStates.Read">
            <summary>read</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstAutomationStates.Write">
            <summary>write</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstAutomationStates.ReadWrite">
            <summary>read and write</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstHostCanDo">
            <summary>
            Host capabilities.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.None">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SendVstEvents">
            <summary>Host supports send of Vst events to plug-in.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SendVstMidiEvent">
            <summary>Host supports send of MIDI events to plug-in.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SendVstTimeInfo">
            <summary>Host supports send of VstTimeInfo to plug-in.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.ReceiveVstEvents">
            <summary>Host can receive Vst events from plug-in.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.ReceiveVstMidiEvent">
            <summary>Host can receive MIDI events from plug-in .</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.ReportConnectionChanges">
            <summary>Host will indicates the plug-in when something changes in plug-in´s routing/connections with #suspend/#resume/#setSpeakerArrangement.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.AcceptIOChanges">
            <summary>Host supports <see cref="M:Jacobi.Vst.Core.IVstHostCommands20.IoChanged"/>.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SizeWindow">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.AsyncProcessing">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.Offline">
            <summary>Host supports offline feature.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SupplyIdle">
            <summary>Host calls idle on plugin.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.OpenFileSelector">
            <summary>Host supports function #openFileSelector().</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.EditFile">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.CloseFileSelector">
            <summary>Host supports function #closeFileSelector().</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.StartStopProcess">
            <summary>Host supports functions #startProcess() and #stopProcess().</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.ShellCategory">
            <summary>'shell' handling via uniqueID. If supported by the Host and the Plug-in has the category #kPlugCategShell.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SupportShell">
            <summary>'shell' handling via uniqueID as suggested by Waves.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostCanDo.SendVstMidiEventFlagIsRealtime">
            <summary>Host supports flags for <see cref="T:Jacobi.Vst.Core.VstMidiEvent"/>.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPluginCanDo">
            <summary>
            Plugin capabilities.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.Unknown">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.SendVstEvents">
            <summary>plug-in will send Vst events to Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.SendVstMidiEvent">
            <summary>plug-in will send MIDI events to Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.SendVstTimeInfo">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.ReceiveVstEvents">
            <summary>plug-in can receive MIDI events from Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.ReceiveVstMidiEvent">
            <summary>plug-in can receive MIDI events from Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.ReceiveVstTimeInfo">
            <summary>plug-in can receive Time info from Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.Offline">
            <summary>plug-in supports offline functions (#offlineNotify, #offlinePrepare, #offlineRun).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.PlugAsChannelInsert">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.PlugAsSend">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.MixDryWet">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.NoRealTime">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.Multipass">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.Metapass">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x1in1out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x1in2out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x2in1out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x2in2out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x2in4out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x4in2out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x4in4out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x4in8out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x8in4out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.x8in8out">
            <summary>Strip of x.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.MidiProgramNames">
            <summary>plug-in supports function #getMidiProgramName().</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.ConformsToWindowRules">
            <summary>
            mac: doesn't mess with grafport. general: may want
            to call sizeWindow (). if you want to use sizeWindow (),
            you must return true (1) in canDo ("conformsToWindowRules")
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCanDo.Bypass">
            <summary>plug-in supports function #setBypass().</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstCanDoHelper">
            <summary>
            A helper class to parse strings into a <see cref="T:Jacobi.Vst.Core.VstPluginCanDo"/> or <see cref="T:Jacobi.Vst.Core.VstHostCanDo"/> enumeration value
            and to convert those to strings that start with a lower case character.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstCanDoHelper.ParsePluginCanDo(System.String)">
            <summary>
            Attempts to parse the <paramref name="cando"/> string.
            </summary>
            <param name="cando">Must not be null or empty.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstPluginCanDo.Unknown"/> when string did not match an enum value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cando"/> is not set to an instance of an object.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="cando"/> is an empty string.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.VstCanDoHelper.ParseHostCanDo(System.String)">
            <summary>
            Attempts to parse the <paramref name="cando"/> string.
            </summary>
            <param name="cando">Must not be null or empty.</param>
            <returns>Returns <see cref="F:Jacobi.Vst.Core.VstHostCanDo.None"/> when string did not match an enum value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cando"/> is not set to an instance of an object.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="cando"/> is an empty string.</exception>
        </member>
        <member name="M:Jacobi.Vst.Core.VstCanDoHelper.ToString(Jacobi.Vst.Core.VstHostCanDo)">
            <summary>
            Converts a <paramref name="cando"/> value to a string compatible with VST.
            </summary>
            <param name="cando">The value to convert to string.</param>
            <returns>Returns the string value for the <paramref name="cando"/>.</returns>
        </member>
        <member name="M:Jacobi.Vst.Core.VstCanDoHelper.ToString(Jacobi.Vst.Core.VstPluginCanDo)">
            <summary>
            Converts a <paramref name="cando"/> value to a string compatible with VST.
            </summary>
            <param name="cando">The value to convert to string.</param>
            <returns>Returns the string value for the <paramref name="cando"/>.</returns>
        </member>
        <member name="T:Jacobi.Vst.Core.VstCanDoResult">
            <summary>
            A value indicating the result of a capacility query.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstCanDoResult.No">
            <summary>No</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstCanDoResult.Unknown">
            <summary>Don't know (default).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstCanDoResult.Yes">
            <summary>Yes</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstEvent">
            <summary>
            The VstEvent represents a base class common to both 
            <see cref="T:Jacobi.Vst.Core.VstMidiEvent"/> and <see cref="T:Jacobi.Vst.Core.VstMidiSysExEvent"/> classes.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstEvent.#ctor(Jacobi.Vst.Core.VstEventTypes,System.Int32,System.Byte[])">
            <summary>
            For derived classes only.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="deltaFrames">The start of this event in the number of delta frames from the current cycle.</param>
            <param name="data">A byte buffer of event data.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.VstEvent.EventType">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstEvent.DeltaFrames">
            <summary>
            Gets the number of frames.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstEvent.Data">
            <summary>
            Gets the event data.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstEventTypes">
            <summary>
            The type of event.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.Unknown">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.MidiEvent">
            <summary>Midi event.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.DeprecatedAudioEvent">
            <summary>Audio event (deprecated).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.DeprecatedVideoEvent">
            <summary>Video event (deprecated).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.DeprecatedParameterEvent">
            <summary>Parameter event (deprecated).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.DeprecatedTriggerEvent">
            <summary>Trigger event (deprecated).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstEventTypes.MidiSysExEvent">
            <summary>Midi System Exclusive event.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstFileSelect">
            <summary>
            Maintains information on the file selector provided by the host.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstFileSelect.Reserved">
            <summary>Contains an unmanaged pointer.</summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileSelect.Command">
            <summary>
            The type of file selector.
            </summary>
            <remarks>Fill this field before call the OpenFileSelector method.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileSelect.FileTypes">
            <summary>
            The file types to filter on.
            </summary>
            <remarks>Fill this field before call the OpenFileSelector method.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileSelect.Title">
            <summary>
            The title displayed on the dialog.
            </summary>
            <remarks>Fill this field before call the OpenFileSelector method.
            The number of characters must not exceed 1024.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 1024 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileSelect.InitialPath">
            <summary>
            The directory initialy selected in the selector.
            </summary>
            <remarks>Fill this field before call the OpenFileSelector method.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileSelect.ReturnPaths">
            <summary>
            The paths to the files the user selected.
            </summary>
            <remarks>This field is filled with zero, one or more file paths when the OpenFileSelector method returns.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.VstFileSelectCommand">
            <summary>
            Indicates to the host what the file selector is supposed to do.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstFileSelectCommand.FileLoad">
            <summary>For loading a file.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstFileSelectCommand.FileSave">
            <summary>For saving a file.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstFileSelectCommand.MultipleFilesLoad">
            <summary>For loading multiple files.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstFileSelectCommand.DirectorySelect">
            <summary>For selecting a directory/folder.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstFileType">
            <summary>
            Information about the file filter types for the file selector.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileType.Name">
            <summary>
            Gets or sets the name of the filter.
            </summary>
            <remarks>The number of characters must not exceed 128.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 128 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstFileType.Extension">
            <summary>
            Gets or sets the file extension for the file filter.
            </summary>
            <remarks>The number of characters must not exceed 8.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when value exceeds 8 characters.</exception>
        </member>
        <member name="T:Jacobi.Vst.Core.VstHostLanguage">
            <summary>
            An indication of the language of the host.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.NotSupported">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.English">
            <summary>The host is in English.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.German">
            <summary>The host is in German.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.French">
            <summary>The host is in French.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.Italian">
            <summary>The host is in Italian.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.Spanish">
            <summary>The host is in Spanish.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstHostLanguage.Japanese">
            <summary>The host is in Japanese.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstKnobMode">
            <summary>
            An indication how the knobs in the UI should behave.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstKnobMode.CircularMode">
            <summary>Circular.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstKnobMode.RelativeCircularMode">
            <summary>Relative circular.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstKnobMode.LinearMode">
            <summary>Linear.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiEvent">
            <summary>
            Represent an immutable midi event.
            </summary>
            <remarks>This Midi event does not represent a System Exclusive midi message.
            Refer to <see cref="T:Jacobi.Vst.Core.VstMidiSysExEvent"/> for Sys.Ex. events.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Core.VstMidiEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int16,System.Byte)">
            <summary>
            Constructs a new immutable instance.
            </summary>
            <param name="deltaFrames">The number of frame from the start of the current cycle.</param>
            <param name="noteLength">The length of the note (when the event is a midi note event).</param>
            <param name="noteOffset">The offset of the note.</param>
            <param name="midiData">The additional midi event data.</param>
            <param name="detune">A detune value. Must lie within [-64,63] range.</param>
            <param name="noteOffVelocity">Velocity for when the note is done.</param>
        </member>
        <member name="M:Jacobi.Vst.Core.VstMidiEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int16,System.Byte,System.Boolean)">
            <summary>
            Constructs a new immutable instance.
            </summary>
            <param name="deltaFrames">The number of frame from the start of the current cycle.</param>
            <param name="noteLength">The length of the note (when the event is a midi note event).</param>
            <param name="noteOffset">The offset of the note.</param>
            <param name="midiData">The additional midi event data.</param>
            <param name="detune">A detune value. Should lie within [-64,63] range (not checked).</param>
            <param name="noteOffVelocity">Velocity for when the note is done.</param>
            <param name="isRealtime">True if the Midi Event was received in real time.</param>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiEvent.NoteLength">
            <summary>
            Gets the length of the note.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiEvent.NoteOffset">
            <summary>
            Gets the offset of the note.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiEvent.Detune">
            <summary>
            Gets the detune value.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiEvent.NoteOffVelocity">
            <summary>
            Gets the velocity when the note was released.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiEvent.IsRealtime">
            <summary>
            Gets an indication if this midi event was played live, not played back from a track.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiKeyName">
            <summary>
            The VstMidiKeyName contains field that are used to 
            communicate names of individual notes (keys).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiKeyName.CurrentProgramIndex">
            <summary>
            When filled by the host indicating the current program, 
            otherwise the plugin should fill this with its current program.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiKeyName.CurrentKeyNumber">
            <summary>
            Filled by the host with the note number for wich the plugin 
            should return the <see cref="P:Jacobi.Vst.Core.VstMidiKeyName.Name"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiKeyName.Name">
            <summary>
            Always filled by the plugin with the note name of the 
            <see cref="P:Jacobi.Vst.Core.VstMidiKeyName.CurrentKeyNumber"/> in the <see cref="P:Jacobi.Vst.Core.VstMidiKeyName.CurrentProgramIndex"/>.
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiProgramCategory">
            <summary>
            Used to communicate the Midi category name back to the host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramCategory.CurrentCategoryIndex">
            <summary>
            Filled by the host to request the category <see cref="P:Jacobi.Vst.Core.VstMidiProgramCategory.Name"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramCategory.Name">
            <summary>
            Filled by the plugin with the name of the <see cref="P:Jacobi.Vst.Core.VstMidiProgramCategory.CurrentCategoryIndex"/>.
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="F:Jacobi.Vst.Core.VstMidiProgramCategory.ParentCategoryIndex">
            <summary>
            The index of the category that is parent of the <see cref="P:Jacobi.Vst.Core.VstMidiProgramCategory.CurrentCategoryIndex"/>.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiProgramName">
            <summary>
            Used to communicate the Midi program name to the host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex">
            <summary>
            Filled by the host requesting a midi program.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.Flags">
            <summary>
            The flags for the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.Name">
            <summary>
            The name for the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.MidiProgram">
            <summary>
            The program change number for the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.MidiBankLSB">
            <summary>
            The least significant bank select number for the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.MidiBankMSB">
            <summary>
            The most significant bank select number for the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstMidiProgramName.ParentCategoryIndex">
            <summary>
            The index of the category that is parent to the <see cref="P:Jacobi.Vst.Core.VstMidiProgramName.CurrentProgramIndex"/>.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiProgramNameFlags">
            <summary>
            Flags for the midi program (name).
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstMidiProgramNameFlags.None">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstMidiProgramNameFlags.MidiIsOmni">
            <summary>Omni mode is on.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstMidiSysExEvent">
            <summary>
            Represents an immutable Midi System Exclusive event.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstMidiSysExEvent.#ctor(System.Int32,System.Byte[])">
            <summary>
            Constructs a new immutable instance.
            </summary>
            <param name="deltaFrames">The number of frame from the start of the current cycle.</param>
            <param name="sysexData">The raw system exclusive data.</param>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPanLaw">
            <summary>
            Indication on the pan algorithm to use.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPanLaw.LinearPanLaw">
            <summary>L = pan * M; R = (1 - pan) * M;</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPanLaw.EqualPowerPanLaw">
            <summary>L = pow (pan, 0.5) * M; R = pow ((1 - pan), 0.5) * M;</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstParameterProperties">
            <summary>
            Used to communicate properties of a plugin parameter to the host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.Flags">
            <summary>
            Flags that are approproate for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.StepFloat">
            <summary>
            The value step for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.SmallStepFloat">
            <summary>
            The small value step for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.LargeStepFloat">
            <summary>
            The large value step for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.MinInteger">
            <summary>
            The minimal value for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.MaxInteger">
            <summary>
            The maximal value for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.StepInteger">
            <summary>
            The value step for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.LargeStepInteger">
            <summary>
            The large value step for the parameter.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.Label">
            <summary>
            The label for the parameter.
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.ShortLabel">
            <summary>
            A short label for the parameter.
            </summary>
            <remarks>The value must not exceed 8 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 7 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.DisplayIndex">
            <summary>
            The order in which to display the parameter relative to the other plugin parameters.
            </summary>
            <remarks>This is used for remote controller display purposes.
            Note that the <see cref="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterSupportsDisplayCategory"/> flag must be set.
            The host can scan all parameters, and find out in what order to display them.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.Category">
            <summary>
            An indication of the category the parameter belongs to.
            </summary>
            <remarks>0: no category, else group index + 1.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.ParameterCountInCategory">
            <summary>
            The number of parameters in the category.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstParameterProperties.CategoryLabel">
            <summary>
            The label for the category.
            </summary>
            <remarks>The value must not exceed 24 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 23 characters.</exception>
        </member>
        <member name="T:Jacobi.Vst.Core.VstParameterPropertiesFlags">
            <summary>
            Flags for the parameter properties.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterIsSwitch">
            <summary>Parameter is a switch (on/off).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterUsesIntegerMinMax">
            <summary>MinInteger, MaxInteger are valid.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterUsesFloatStep">
            <summary>StepFloat, SmallStepFloat, LargeStepFloat are valid.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterUsesIntStep">
            <summary>StepInteger, LargeStepInteger are valid.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterSupportsDisplayIndex">
            <summary>DisplayIndex is valid.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterSupportsDisplayCategory">
            <summary>Category, etc. valid.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstParameterPropertiesFlags.ParameterCanRamp">
            <summary>Set if parameter value can ramp up/down.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPatchChunkInfo">
            <summary>
            Used to communicate the version of the chunk data before the plugin is asked to load it in.
            </summary>
        </member>
        <member name="M:Jacobi.Vst.Core.VstPatchChunkInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an immutable instance.
            </summary>
            <param name="version">Version number of the format. Should be 1.</param>
            <param name="pluginId">The unique ID of the plugin that wrote the chunk data.</param>
            <param name="pluginVersion">The version of the plugin that wrote the chunk data.</param>
            <param name="elementCount">The number of Programs (Bank) or Parameters (Program).</param>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPatchChunkInfo.Version">
            <summary>
            Gets the format version (should be 1).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPatchChunkInfo.PluginID">
            <summary>
            Gets the unique plugin ID.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPatchChunkInfo.PluginVersion">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPatchChunkInfo.ElementCount">
            <summary>
            Gets the number of Programs (Bank) or Parameters (Program).
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPinProperties">
            <summary>
            Communicates connection pin properties of the plugin to host.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPinProperties.Flags">
            <summary>
            The flags of the connection pin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPinProperties.Label">
            <summary>
            The name or label of the connection pin.
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPinProperties.ShortLabel">
            <summary>
            The short label of the connection pin.
            </summary>
            <remarks>The value must not exceed 8 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 7 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstPinProperties.ArrangementType">
            <summary>
            The speaker arrangement used for this connection pin.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPinPropertiesFlags">
            <summary>
            Flags for the pin properties.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPinPropertiesFlags.PinIsActive">
            <summary>The pin is active, ignored by Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPinPropertiesFlags.PinIsStereo">
            <summary>The pin is first of a stereo pair.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPinPropertiesFlags.PinUseSpeaker">
            <summary>The <see cref="P:Jacobi.Vst.Core.VstPinProperties.ArrangementType"/> is valid and can be used to get the wanted arrangement.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPluginCategory">
            <summary>
            Indicates under what category the plugin falls.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Unknown">
            <summary>Unknown, category not implemented.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Effect">
            <summary>Simple Effect.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Synth">
            <summary>VST Instrument (Synths, samplers, ...).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Analysis">
            <summary>Scope, Tuner, ...</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Mastering">
            <summary>Dynamics, ...</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Spacializer">
            <summary>Panners, ...</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.RoomFx">
            <summary>Delays and Reverbs.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.SurroundFx">
            <summary>Dedicated surround processor.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Restoration">
            <summary>Denoiser, ...</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.OfflineProcess">
            <summary>Offline Process.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Shell">
            <summary>Plug-in is container of other plug-ins.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginCategory.Generator">
            <summary>ToneGenerator, ...</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstPluginFlags">
            <summary>
            Capability flags for the plugin.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.None">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.HasEditor">
            <summary>Set if the plug-in provides a custom editor.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.CanReplacing">
            <summary>Supports replacing process mode (which should the default mode in VST 2.4).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.ProgramChunks">
            <summary>Program data is handled in formatless chunks.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.IsSynth">
            <summary>Plug-in is a synth (VSTi), Host may assign mixer channels for its outputs.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.NoSoundInStop">
            <summary>Plug-in does not produce sound when input is all silence.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstPluginFlags.CanDoubleReplacing">
            <summary>Plug-in supports double precision processing.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstProcessLevels">
            <summary>
            Reports the logical thread ID to the plugin.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessLevels.Unknown">
            <summary>Not supported by Host.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessLevels.User">
            <summary>1: currently in user thread (GUI).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessLevels.Realtime">
            <summary>2: currently in audio thread (where process is called).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessLevels.Prefetch">
            <summary>3: currently in 'sequencer' thread (MIDI, timer etc).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessLevels.Offline">
            <summary>4: currently offline processing and thus in user thread.</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstProcessPrecision">
            <summary>
            Indicates at what precision audio is processed.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessPrecision.Process32">
            <summary>32 bit precision (float or single).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstProcessPrecision.Process64">
            <summary>64 bit precision (double).</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstSpeakerArrangement">
            <summary>
            Speaker arrangment information.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerArrangement.Type">
            <summary>
            e.g. #kSpeakerArr51 for 5.1  @see VstSpeakerArrangementType.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerArrangement.Speakers">
            <summary>
            Variable sized speaker array.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstSpeakerArrangementType">
            <summary>
            The speaker arrangement types.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrUserDefined">
            <summary>User defined.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrEmpty">
            <summary>An empty arrangement.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrMono">
            <summary>M</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrStereo">
            <summary>L R</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrStereoSurround">
            <summary>Ls Rs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrStereoCenter">
            <summary>Lc Rc</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrStereoSide">
            <summary>Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArrStereoCLfe">
            <summary>C Lfe</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr30Cine">
            <summary>L R C</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr30Music">
            <summary>L R S</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr31Cine">
            <summary>L R C Lfe</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr31Music">
            <summary>L R Lfe S</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr40Cine">
            <summary>L R C   S (LCRS)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr40Music">
            <summary>L R Ls  Rs (Quadro)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr41Cine">
            <summary>L R C   Lfe S (LCRS+Lfe)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr41Music">
            <summary>L R Lfe Ls Rs (Quadro+Lfe)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr50">
            <summary>L R C Ls  Rs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr51">
            <summary>L R C Lfe Ls Rs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr60Cine">
            <summary>L R C   Ls  Rs Cs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr60Music">
            <summary>L R Ls  Rs  Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr61Cine">
            <summary>L R C   Lfe Ls Rs Cs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr61Music">
            <summary>L R Lfe Ls  Rs Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr70Cine">
            <summary>L R C Ls  Rs Lc Rc</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr70Music">
            <summary>L R C Ls  Rs Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr71Cine">
            <summary>L R C Lfe Ls Rs Lc Rc</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr71Music">
            <summary>L R C Lfe Ls Rs Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr80Cine">
            <summary>L R C Ls  Rs Lc Rc Cs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr80Music">
            <summary>L R C Ls  Rs Cs Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr81Cine">
            <summary>L R C Lfe Ls Rs Lc Rc Cs</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr81Music">
            <summary>L R C Lfe Ls Rs Cs Sl Sr</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerArrangementType.SpeakerArr102">
            <summary>L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstSpeakerProperties">
            <summary>
            Used to communicate speaker properties to the host.
            </summary>
            <remarks>The origin for azimuth is right (as by math conventions dealing with radians).
            The elevation origin is also right, visualizing a rotation of a circle across the
            -pi/pi axis of the horizontal circle. Thus, an elevation of -pi/2 corresponds
            to bottom, and a speaker standing on the left, and 'beaming' upwards would have
            an azimuth of -pi, and an elevation of pi/2.
            For user interface representation, grads are more likely to be used, and the
            origins will obviously 'shift' accordingly.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerProperties.Azimath">
            <summary>
            unit: rad, range: -PI...PI, exception: 10.f for LFE channel.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerProperties.Elevation">
            <summary>
            unit: rad, range: -PI/2...PI/2, exception: 10.f for LFE channel.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerProperties.Radius">
            <summary>
            unit: meter, exception: 0.f for LFE channel.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerProperties.Name">
            <summary>
            for new setups, new names should be given (L/R/C... won't do).
            </summary>
            <remarks>The value must not exceed 64 characters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the value exceeds 63 characters.</exception>
        </member>
        <member name="P:Jacobi.Vst.Core.VstSpeakerProperties.SpeakerType">
            <summary>
            The speaker type.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstSpeakerTypes">
            <summary>
            Single speaker types.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerUndefined">
            <summary>Undefined</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerM">
            <summary>Mono (M)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerL">
            <summary>Left (L)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerR">
            <summary>Right (R)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerC">
            <summary>Center (C)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerLfe">
            <summary>Subbass (Lfe)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerLs">
            <summary>Left Surround (Ls)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerRs">
            <summary>Right Surround (Rs)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerLc">
            <summary>Left of Center (Lc)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerRc">
            <summary>Right of Center (Rc)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerS">
            <summary>Surround (S)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerCs">
            <summary>Center of Surround (Cs) = Surround (S)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerSl">
            <summary>Side Left (Sl)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerSr">
            <summary>Side Right (Sr)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTm">
            <summary>Top Middle (Tm)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTfl">
            <summary>Top Front Left (Tfl)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTfc">
            <summary>Top Front Center (Tfc)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTfr">
            <summary>Top Front Right (Tfr)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTrl">
            <summary>Top Rear Left (Trl)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTrc">
            <summary>Top Rear Center (Trc)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerTrr">
            <summary>Top Rear Right (Trr)</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSpeakerTypes.SpeakerLfe2">
            <summary>Subbass 2 (Lfe2)</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstTimeInfo">
            <summary>
            Used to communicate Time information to the plugin.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.Flags">
            <summary>
            Time format Flags.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.SamplePosition">
            <summary>
            The current Position in audio samples (always valid).
            </summary>
            <remarks>Current Position. It must always be valid, and should not cost a lot to ask for. 
            The sample position is ahead of the time displayed to the user. In sequencer stop mode, 
            its value does not change. A 32 bit integer is too small for sample positions, 
            and it's a double to make it easier to convert between ppq and samples.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.SampleRate">
            <summary>
            The current Sample Rate in Herz (always valid).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.NanoSeconds">
            <summary>
            System Time in nanoseconds (10^-9 second).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.PpqPosition">
            <summary>
            Musical Position, in Quarter Note (1.0 equals 1 Quarter Note).
            </summary>
            <remarks>At tempo 120, 1 quarter makes 1/2 second, so 2.0 ppq translates to 48000 samples at 48kHz sample rate.
            .25 ppq is one sixteenth note then. if you need something like 480ppq, you simply multiply ppq by that scaler.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.Tempo">
            <summary>
            current Tempo in BPM (Beats Per Minute).
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.BarStartPosition">
            <summary>
            last Bar Start Position, in Quarter Note.
            </summary>
            <remarks>Say we're at bars/beats readout 3.3.3. That's 2 bars + 2 q + 2 sixteenth, 
            makes 2 * 4 + 2 + .25 = 10.25 ppq. at tempo 120, that's 10.25 * .5 = 5.125 seconds, 
            times 48000 = 246000 samples.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.CycleStartPosition">
            <summary>
            Cycle Start (left locator), in Quarter Note.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.CycleEndPosition">
            <summary>
            Cycle End (right locator), in Quarter Note.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.TimeSignatureNumerator">
            <summary>
            Time Signature Numerator (e.g. 3 for 3/4)
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.TimeSignatureDenominator">
            <summary>
            Time Signature Denominator (e.g. 4 for 3/4)
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.SmpteOffset">
            <summary>
            SMPTE offset (in SMPTE subframes (bits; 1/80 of a frame)).
            </summary>
            <remarks>The current SMPTE position can be calculated using #samplePos, #sampleRate, and #smpteFrameRate.</remarks>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.SmpteFrameRate">
            <summary>
            Smpte frame rate.
            </summary>
        </member>
        <member name="P:Jacobi.Vst.Core.VstTimeInfo.SamplesToNearestClock">
            <summary>
            MIDI Clock Resolution (24 Per Quarter Note), can be negative (nearest clock).
            </summary>
            <remarks>MIDI Clock Resolution (24 per Quarter Note), can be negative the distance to the next midi clock 
            (24 ppq, pulses per quarter) in samples. unless samplePos falls precicely on a midi clock, 
            this will either be negative such that the previous MIDI clock is addressed, 
            or positive when referencing the following (future) MIDI clock.</remarks>
        </member>
        <member name="T:Jacobi.Vst.Core.VstTimeInfoFlags">
            <summary>
            Time information flags.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TransportChanged">
            <summary>Indicates that play, cycle or record state has changed.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TransportPlaying">
            <summary>Set if Host sequencer is currently playing.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TransportCycleActive">
            <summary>Set if Host sequencer is in cycle mode.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TransportRecording">
            <summary>Set if Host sequencer is in record mode.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.AutomationWriting">
            <summary>Set if automation write mode active (record parameter changes).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.AutomationReading">
            <summary>Set if automation read mode active (play parameter changes).</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.NanoSecondsValid">
            <summary>VstTimeInfo::nanoSeconds valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.PpqPositionValid">
            <summary>VstTimeInfo::ppqPos valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TempoValid">
            <summary>VstTimeInfo::tempo valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.BarStartPositionValid">
            <summary>VstTimeInfo::barStartPos valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.CyclePositionValid">
            <summary>VstTimeInfo::cycleStartPos and VstTimeInfo::cycleEndPos valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.TimeSignatureValid">
            <summary>VstTimeInfo::timeSigNumerator and VstTimeInfo::timeSigDenominator valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.SmpteValid">
            <summary>VstTimeInfo::smpteOffset and VstTimeInfo::smpteFrameRate valid</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstTimeInfoFlags.ClockValid">
            <summary>VstTimeInfo::samplesToNextClock valid</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstSmpteFrameRate">
            <summary>
            Smpte frame rates.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte24fps">
            <summary>24 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte25fps">
            <summary>25 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte2997fps">
            <summary>29.97 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte30fps">
            <summary>30 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte2997dfps">
            <summary>29.97 drop</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte30dfps">
            <summary>30 drop</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.SmpteFilm16mm">
            <summary>Film 16mm</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.SmpteFilm35mm">
            <summary>Film 35mm</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte239fps">
            <summary>HDTV: 23.976 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte249fps">
            <summary>HDTV: 24.976 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte599fps">
            <summary>HDTV: 59.94 fps</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstSmpteFrameRate.Smpte60fps">
            <summary>HDTV: 60 fps</summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstVariableIO">
            <summary>
            under construction
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVariableIO.Inputs">
            <summary>
            Input audio buffers.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVariableIO.Outputs">
            <summary>
            Output audio buffers.
            </summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstVirtualKey">
            <summary>
            Platform-independent definition of Virtual Keys.
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NONE">
            <summary>Null value.</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_BACK">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_TAB">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_CLEAR">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_RETURN">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_PAUSE">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_ESCAPE">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SPACE">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NEXT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_END">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_HOME">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_LEFT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_UP">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_RIGHT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_DOWN">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_PAGEUP">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_PAGEDOWN">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SELECT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_PRINT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_ENTER">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SNAPSHOT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_INSERT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_DELETE">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_HELP">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD0">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD1">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD2">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD3">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD4">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD5">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD6">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD7">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD8">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMPAD9">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_MULTIPLY">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_ADD">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SEPARATOR">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SUBTRACT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_DECIMAL">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_DIVIDE">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F1">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F2">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F3">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F4">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F5">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F6">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F7">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F8">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F9">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F10">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F11">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_F12">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_NUMLOCK">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SCROLL">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_SHIFT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_CONTROL">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_ALT">
            <summary></summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstVirtualKey.VKEY_EQUALS">
            <summary></summary>
        </member>
        <member name="T:Jacobi.Vst.Core.VstModifierKeys">
            <summary>
            Platform-independent definition of modifier Keys
            </summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstModifierKeys.MODIFIER_SHIFT">
            <summary>Shift</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstModifierKeys.MODIFIER_ALTERNATE">
            <summary>Alt</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstModifierKeys.MODIFIER_COMMAND">
            <summary>Control on Mac</summary>
        </member>
        <member name="F:Jacobi.Vst.Core.VstModifierKeys.MODIFIER_CONTROL">
            <summary>Ctrl on PC, Apple on Mac</summary>
        </member>
    </members>
</doc>
